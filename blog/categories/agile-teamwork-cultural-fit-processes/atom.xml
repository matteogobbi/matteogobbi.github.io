<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Agile,teamwork,cultural-fit,processes | Matteo Gobbi]]></title>
  <link href="http://matteogobbi.github.io/blog/categories/agile-teamwork-cultural-fit-processes/atom.xml" rel="self"/>
  <link href="http://matteogobbi.github.io/"/>
  <updated>2015-08-27T22:52:05+01:00</updated>
  <id>http://matteogobbi.github.io/</id>
  <author>
    <name><![CDATA[Matteo Gobbi]]></name>
    <email><![CDATA[job@matteogobbi.it]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Teamworking]]></title>
    <link href="http://matteogobbi.github.io/blog/2015/08/31/teamworking/"/>
    <updated>2015-08-31T08:02:23+01:00</updated>
    <id>http://matteogobbi.github.io/blog/2015/08/31/teamworking</id>
    <content type="html"><![CDATA[<p>A team, is a machine. We can imagine it like a car which goes straight ahead. Like a car, it has a mechanism which should be built possibly to be bug-free. The displacement is the energy of any team member. The fuel is the passion.</p>

<p>In this article I&rsquo;ll discuss some good approach to make your team work properly and with the right attitude. Even if these approaches can be valid for any kind of team, I&rsquo;ll talk especially about a tech team, which is actually the kind of team I work in.</p>

<!--more-->


<p><br/></p>

<h2>Cultural fit</h2>

<p>Spending most of your daily time with the same people, every day, means discussing, accepting and sharing.<br/>
Writing code in a project with other people means <strong>trust them</strong> and their skills.<br/>
So how can we figure out if a person is the right one whom to work with?</p>

<p>Hiring someone in a team is not that easy: it means <strong>investing in her</strong>, spending time to let her fully enter in the project and in all the processes. Most importantly, we&rsquo;d never want to break the team&rsquo;s synergy and happiness hiring the wrong person.</p>

<p>When I interview a tech candidate in my company, I try to understand as much as possible (and in a very short time) if she has the right technical skills and if she can culturally fit our team.<br/>
In our company we normally have 4/5 steps: in addition to doing a technical interview, the candidate has to meet the CEO, the Product Manager and other member of the team. When the interview is finished, we have a quick standup meeting to share our opinion with the other interviewer. Of course the prerequisites are the candidate&rsquo;s techincal skills, as if the candidate doesn&rsquo;t meet our requirements, the interview process stops short. If instead she does, the discussion goes ahead to the cultural fit.</p>

<p>Here the truth: it is not easy to evaluate the personality of a guy in 1 hour or so, but if the most of us has the same impression, that could be probably true.<br/>
There are a couple of pretty funny questions we ask each other in every of this meeting: <strong>would you take a beer with this guy?</strong> or <strong>Would you talk with this guy while you are waiting for your flight?</strong><br/>
They could seem 2 stupid questions, but don&rsquo;t get me wrong: these questions just help us to make more concrete an abstract concept sush as cultural fit, making it easier to express our opinion. Our goal is just to understand if we&rsquo;d be happy to work with that person, and if that person would be happy <strong>to be every day with us</strong>.</p>

<p>Another good point to mention, is about the candidate&rsquo;s past experiences.<br/>
Just because a candidate used to work in Facebook, Google or any other very top company, <strong>doesn&rsquo;t mean that for sure he&rsquo;d fit our team</strong>.<br/>
Working in a small/medium company is most of the time totally different in both aspects, technical and cultural. Indeed, within a smaller company, the team isn&rsquo;t scaled as much and the job position often requires more responsabilities (and the ability to juggle between them). Also, with fewer employees, interpersonal interactions become even more important and so does culture.</p>

<p><br/></p>

<h2>Scheduling process</h2>

<p>In the former paragraph I mentioned the importance of &ldquo;<strong>be aligned</strong>&rdquo; with the team&rsquo;s processes. A very famous software development process used in many teams, is the <strong>Agile methodology</strong>.<br/>
<strong>SCRUM</strong> is an agile approach to manage projects. For the sake of semplicity, we will refer to any feature, bug, task or improvement which has to be implemented or solved in the project, ad a <code>story</code>. There are several online tools to track <strong>Stories</strong>, one of this (and also a very famous one) is <strong>JIRA</strong>.<br/>
JIRA is really powerful and it has a lot of functions that I won&rsquo;t explain in this article. Instead I want to talk about <strong>boards</strong>. In JIRA Agile we can create a <code>board</code> related to a project (i.e. iOS app) where we can track our stories. The board has to be divided in  columns, that in SCRUM are normally these:<br/>
<br/>
<code>TO DO</code> -> <code>IN PROGRESS</code> -> <code>REVIEW</code> -> <code>TESTING</code> -> <code>READY</code> -> <code>DONE</code><br/>
<br/>
The reason why I put <strong>arrows (<code>-&gt;</code>)</strong> between columns, is because this is the sequence which any story should follow.<br/>
The process is easy: when a story is in <code>TO DO</code>, means that <strong>no one is working on that</strong>, and it is waiting to be moved in progress.<br/>
When someone <strong>starts to work on a story</strong>, he should moves it in <code>IN PROGRESS</code>. Doing in this way, other developers will see that story already started from someone else, avoiding to start working on the same thing.<br/>
When a developer completes a story, he moves it in <code>REVIEW</code>. The <code>REVIEW</code> state means that <strong>another developer should have a look at that story</strong>, confirming or not its completeness and correctness. If it is correct, it will be moved in the <code>TESTING</code> column, otherwise back <code>IN PROGRESS</code>.<br/>
Now is the time of QAs. They have to <strong>test properly</strong> the story and if everything is ok, they should move it in <code>READY</code>. At this point, developers will can merge the story in the main (<code>develop</code>) branch, moving then the story in <code>DONE</code>.<br/>
<br/>
Some team, uses to have a couple of columns in more: <code>WAITING FOR REVIEW</code> and <code>WAITING FOR TESTING</code>. In our team instead, we prefer to have lesser states.<br/>
<br/>
There are a few really important ceremonies that make Scrum extremelly useful. Let&rsquo;s see them 1 by 1:</p>

<h3>Backlog Grooming</h3>

<p><strong>Backlog Grooming</strong> is a meeting that normally takes 30/60 minutes in which the team prioritizes stories in the backlog. Prioritizing means <strong>moving the most important stories at the top of the Product Backlog</strong>. Stories at the top, will be the first to be inserted in the next sprint.</p>

<h3>Sprint Planning</h3>

<p><strong>Sprint Planning</strong> is a meeting in which the team discusses and estimates stories on top of the backlog, in order to put them in the next sprint. A sprint can be of an arbitrary duration, but commonly it takes 2 weeks. In this period the team should complete all the stories inserted in it. Initially it is not easy figuring out how many stories the team can complete in 2 weeks, as it is not easy to estimate them. Sprint by sprint it will become naturally easier. There are different ways to estimate a story, one of this is the <strong>T-shirt size</strong> <code>(.., XS, S, M, L, XL, ..)</code>. Personally I don&rsquo;t like it. I do prefer numbers ;). A classic sequence to use is the <strong>Fibonacci&rsquo;s</strong> <code>(1, 2, 3, 5, 8, 13, 21, ..)</code>.<br/>
This meeting is extremely important to <strong>keep the team aligned on what are the next things to do, and how long they should take</strong>.</p>

<h3>Daily Standup Meeting</h3>

<p>In this meeting, every morning before start to work, team&rsquo;s members stand in circle. 1 by 1 they say to the rest of the group <strong>what they did yesterday, and what they will do today</strong>.<br/>
This meeting has to be quick and shouldn&rsquo;t take more than 15 minutes. Every member can talk for 1 or 2 minutes, then the ball pass in the hands of the next member. This is exactly the reason why this meeting is performed by standing in circle. Standing, people are tempted to be 100% focused and to be quick on exposing.</p>

<h3>Sprint Review</h3>

<p><strong>Sprint Review</strong> is the meeting happening at the end of the sprint. Here the sprint gets closed and a member of the team explains what has been completed and what has been not, mentioning eventual scope changes or issues encountered.</p>

<h3>Sprint Retrospective</h3>

<p>Immediatelly after the Sprint Review, there is the <strong>Sprint Retrospective</strong>. The goal of this meeting is to bring out anything which needs to be improved, as for instance processes, teamwork, etc. An interesting part of the sprint retrospective is the initial improvement ideation phase (<code>time-boxed</code>), in which every member of the team keeps silent while writing on green and pink tickets any good and bad things related to the last sprint, what went well, what didn&rsquo;t, what she would change and what she is grateful for. Just few companies do this properly, even though it&rsquo;s essential in improving the way we work as a team.<br/>
At the end of the Retrospective, a few <strong>follow-up actions</strong> to improve processes and teamwork are set up for the next sprint.</p>

<p><br/></p>

<h2>Pair programming</h2>

<p>Sometimes it&rsquo;s really valuable to work in pair on a feature or on finding a bug. While a developer is writing code, another can observe him, following his approach, suggesting different ways or eventually correcting him.<br/>
In my team we use to do pair programming when we have really big and important parts of the project to implement or refactor. In these cases, <strong>the approach used at the base will be foundamental, as it will affect the whole implementation</strong>. I stongly reccommend to do pair programming if you ever find yourself in situations like these.</p>

<p><br/></p>

<h2>Conclusion</h2>

<p>Keeping happiness in the air is the most important thing for a team. Having defined processes and being aligned techincally as well as culturally, we can reach sky high results.<br/>
<br/>
Remember also to give feedbacks to your teammates in both negative and positive cases. This feedback can be <strong>general</strong>, or <strong>specific</strong>. An example could be <code>Ehi Matteo, you really did a great job here!</code> or <code>Ehi Matteo, don't you think it would be better to do this in an other way next time?</code>.</p>

<p>BTW, I wish you the best in your team ;) !<br/>
<br/>
Thanks to my friend and colleague <a href="http://www.sakho.me/">Antoine Sakho</a> for the review of this article.</p>

<p><strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
