<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Architecture | Matteo Gobbi]]></title>
  <link href="http://matteogobbi.github.io/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://matteogobbi.github.io/"/>
  <updated>2016-05-08T19:11:57+02:00</updated>
  <id>http://matteogobbi.github.io/</id>
  <author>
    <name><![CDATA[Matteo Gobbi]]></name>
    <email><![CDATA[job@matteogobbi.it]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Architecturing A/B Experiments]]></title>
    <link href="http://matteogobbi.github.io/blog/2016/03/24/architecturing-a-slash-b-experiments/"/>
    <updated>2016-03-24T10:02:48+01:00</updated>
    <id>http://matteogobbi.github.io/blog/2016/03/24/architecturing-a-slash-b-experiments</id>
    <content type="html"><![CDATA[<p>Making experiments on a product is one of the most powerful tecnique for a company to get the best response from its customers. But sometimes, especially when they are more than 2 or 3 at the same time, it may become a bit frustrating for developers who find pieces of experiment blocks around the whole project.<br/>
In this article I&rsquo;ll explain an easy architectural approach to keep our code clean and dynamic.</p>

<!--more-->


<p><br/></p>

<h2>What&rsquo;s an A/B test?</h2>

<p>Let&rsquo;s suppose we want to improve a feature of our app in order to get more users using it. We have few idea to improve it (involving design, visibility, etc), but we don&rsquo;t know exactly which one would be the best to get the max response by our users. The solution is to set up an <strong>A/B test</strong>.<br/>
An A/B test is an experiment which randomnly allocates users in a specific variation. Let&rsquo;s see how does it work:<br/>
<br>
Let&rsquo;s say that we want to know which is the best price we should sell our premium membership in order to get the highest revenues.<br/>
We decide to setup 3 variation:</p>

<ul>
<li><strong>Original Variation</strong>: 15,00 $;</li>
<li><strong>Variation A</strong>: 25,00 $;</li>
<li><strong>Variation B</strong>: 40,00 $.</li>
</ul>


<p>Every user using our app, through specific APIs (i.e. <a href="http://apptimize.com/">Apptimize</a> APIs), will be allocated in one of these variations, and the service will return to our client the variation where the user has been allocated. At this point, we&rsquo;ll execute a piece of code rather than another, according with the choosen variation.<br/>
In the example above, the user will see the choosen price for the variation which he has been allocated in. Note that <strong>an experiment, must always includes the original variation</strong>, or in other words, the variation which was there before starting the experiment, otherwise we&rsquo;d never know if that was the best solution or if effectivelly was not good enough.</p>

<p>Great job, the experiment is running! Now we have just to wait an arbitrary amount of time and get the results.<br/>
<br>
Ok, a week is gone and we found out these results:</p>

<ul>
<li>Original Variation: <strong>1000 users</strong> payed 15,00 $ -> <strong>15.000,00 $ in revenues</strong>;</li>
<li>Variation A: <strong>800 users</strong> payed 25,00 $ -> <strong>20.000,00 $ in revenues</strong>;</li>
<li>Variation B: <strong>300 users</strong> payed 40,00 $ -> <strong>12.000,00 $ in revenues</strong>;</li>
</ul>


<p>Note that neither the lowest price nor the highest price won! Indeed <strong>Variation A</strong> (with a price in the middle) produced the highest revenues.<br/>
Therefore, we should set the price of the memebership we are selling to 25,00$ and close the experiment.</p>

<p><br/></p>

<h2>OMG this is so dirty!</h2>

<p>An example of experiment using the famous Apptimize platform, might be this:</p>

<pre><code class="objc">[Apptimize runTest:@"Experiment name" withBaseline:^{
  // Baseline variant "original"
  // ..code
  // ..code
  // ..code
  } andVariations:@{
    @"variation1": ^{
      // Variant "Variation A"
      // ..code
      // ..code
      // ..code
    }, @"variation2": ^{
      // Variant "Variation B"
      // ..code
      // ..code
      // ..code
    }
  }
];
</code></pre>

<p>Can you imagine as dirty can become your project?<br/>
Let&rsquo;s see the downsides of using this approach:</p>

<p><strong>☹ Dirty code</strong><br/>
In addition to have &ldquo;spaghetti code&rdquo;, XCode desn&rsquo;t apply a correct <strong>sintax higlighting</strong> for pieces of code like the one above;</p>

<p><strong>☹ Imports</strong><br/>
A/B test framework <strong>imported here and there around the whole project</strong>;</p>

<p><strong>☹ Nested Experiments</strong><br/>
Even if they should be avoided, <strong>nested experiments become really hard to manage</strong>;</p>

<p><strong>☹ No nil blocks</strong><br/>
If you need to excute a block of code just in the variations of the experiment, doing nothing in the original variation, <strong>you cannot return <code>nil</code> in the baseline block</strong>. You have instead to return an empty block;</p>

<p><strong>☹ Checking implies running</strong><br/>
In order to <strong>check if an user has been allocated in an experiment&rsquo;s variation, you need to run the test every time</strong>. Every time you run an experiment on an user, he becomes part of it, affecting the final stats. Sometimes instead, you might want just to check if he has been allocated in the experiment or not, without running it.<br/>
For example if you want to run an experiment on users which respect a specific condition, and at some point in the app you need to check if the current user is in a variation of this experiment or not without risking to allocate him in the experiment itself, it may be not easy to solve, and your code could really become dirty and tricky to read;</p>

<p><strong>☹ Not easy to remove</strong><br/>
Don&rsquo;t forget that <strong>experiments are temporary</strong>, and you might want to easily remove them once closed. So you should not over complicate your current architecture and code;</p>

<p><strong>☹ Affects unit tests</strong><br/>
Experiments will <strong>run also during unit tests</strong>. To avoid this, you need to check the target before launching an experiment, making your code even more dirty.</p>

<p><br/></p>

<h2>A separate experiment manager</h2>

<p>In order to solve the downsides exposed in the previous paragraph, we first need to wrap the &ldquo;A/B test&rdquo; framework inside a custom class:</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;


typedef void (^VariationBlock)();

@interface MGExperimentsManager : NSObject

+ (instancetype)sharedInstance;

- (void)setBaselineVariation:(VariationBlock)baselineVariation forExperimentWithName:(NSString *)experimentName;  

- (void)setVariation:(VariationBlock)variation withName:(NSString *)variationName forExperimentName:(NSString *)experimentName;  

- (void)runTest:(NSString *)experimentName;

- (NSDictionary &lt;NSString *, NSString *&gt; *)testInfo;

@end
</code></pre>

<p>As you see, there are specific methods to set the baseline variation and the other variations, plus a method to run a specific test.<br/>
Let&rsquo;s see a case of use:</p>

<pre><code class="objc">__weak typeof (self) weakSelf = self;

[self setBaselineVariation:^{
    //...code
    //...code
    //...code
} forExperimentWithName:kMGExperimentName];

[self setVariation:^{
    //...code
    //...code
    //...code   
} withName:@"variation1" forExperimentName:kMGExperimentName];

[self runTest:kMGExperimentName];
</code></pre>

<p>A nice thing to highlight, is that you can launch these 3 methods above, also in different moment or in different point of the app. Basically you can easily prepare and then launch your experiment, mantaining the code clean and readable. Even more important, your framework dependence is just in a unique class which wraps it, and will help you to mantain your code (i.e. you want to replace Apptimize with another A/B test framework).</p>

<p><br/>
The following is the implementation file of the <code>MGExperimentsManager</code> class. I won&rsquo;t spend time entering in the details of this implementation, as it&rsquo;s quite easy to read and it&rsquo;s not the main point of this article:</p>

<pre><code class="objc">#import "MGExperimentsManager.h"
#import &lt;Apptimize/Apptimize.h&gt;


@implementation MGExperimentsManager {
    NSMutableDictionary&lt;NSString *, VariationBlock&gt; *experimentsBaselines_;
    NSMutableDictionary&lt;NSString *, NSMutableDictionary&lt;NSString *, VariationBlock&gt; *&gt; *experimentsVariations_;

}

+ (instancetype)sharedInstance
{
    static MGExperimentsManager *experimentManager;
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        experimentManager = [MGExperimentsManager new];
    });

    return experimentManager;
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        experimentsBaselines_ = [NSMutableDictionary new];
        experimentsVariations_ = [NSMutableDictionary new];
    }
    return self;
}

- (void)setBaselineVariation:(nullable VariationBlock)baselineVariation forExperimentWithName:(nonnull NSString *)experimentName
{
    NSParameterAssert(experimentName);

    if (!experimentName) {
        return;
    }

    experimentsBaselines_[experimentName] = baselineVariation;
}

- (void)setVariation:(nullable VariationBlock)variation withName:(nonnull NSString *)variationName forExperimentName:(nonnull NSString *)experimentName
{
    NSParameterAssert(experimentName);
    NSParameterAssert(variationName);

    if (!experimentName || !variationName) {
        return;
    }

    if (!experimentsVariations_[experimentName]) {
        experimentsVariations_[experimentName] = [NSMutableDictionary new];
    }

    experimentsVariations_[experimentName][variationName] = variation;
}

- (void)runTest:(nonnull NSString *)experimentName
{
    NSParameterAssert(experimentName);

    if (!experimentName) {
        return;
    }

    VariationBlock baselineVariation = experimentsBaselines_[experimentName];
    NSDictionary *variations = [experimentsVariations_[experimentName] copy];

    NSAssert(variations, @"There is not even a variation");
    NSAssert([variations count] &gt; 0, @"There is not even a variation");

    if (!variations || [variations count] == 0) {
        return;
    }

    if (!baselineVariation) {
        baselineVariation = ^(){};
    }

    [Apptimize runTest:experimentName withBaseline:baselineVariation andVariations:variations];

    [self mg_removeStoredBlocksForExperimentWithName:experimentName];
}

- (NSDictionary &lt;NSString *, NSString *&gt;*)testInfo
{
    NSDictionary *apptimizeTestInfo = [Apptimize testInfo];

    NSMutableDictionary &lt;NSString *, NSString *&gt;*enrolledTests = [NSMutableDictionary dictionary];

    if (apptimizeTestInfo &amp;&amp; apptimizeTestInfo.count &gt; 0) {
        [apptimizeTestInfo enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {
            NSString *testName = [MGExperimentsManagerHelper formattedTestName:key];
            NSString *variation = [MGExperimentsManagerHelper trimmedString:[obj enrolledVariantName]];
            enrolledTests[testName] = variation;
        }];
    }

    return [enrolledTests copy];
}


#pragma mark - Private methods

- (void)mg_removeStoredBlocksForExperimentWithName:(nonnull NSString *)experimentName
{
    NSParameterAssert(experimentName);

    if (!experimentName) {
        return;
    }

    experimentsBaselines_[experimentName] = nil;
    experimentsVariations_[experimentName] = nil;
}

@end
</code></pre>

<p><br/></p>

<h2>The core of the architecture</h2>

<p>Now that we have all the pieces, let&rsquo;s pass to the final step of the architecture.<br/>
First of all, we want to keep our experiments in order, easy to use, easy to remove once closed. A good way to do this, is using <strong>categories</strong>.<br/>
<br/>
Having a category of our experiment manager class for every experiment, we can mantain them well separated from each other. Moreover, where we need, we have just to import the category relatives to the experiment we want to run (or check).<br/>
The header file of the experiment&rsquo;s category should be something like this:</p>

<pre><code class="objc">#import "MGExperimentsManager.h"


typedef NS_ENUM(NSInteger, MGPriceVariation) {
    MGPriceVariationNotEnrolled        = -1,
    MGPriceVariationNotAssigned        = 0, //or MGPriceVariationOriginal
    MGPriceVariationAssignedA           = 1,
    MGPriceVariationAssignedB           = 2
};

@interface MGExperimentsManager (PriceExperiment)

@property (readonly) MGPriceVariation priceVariation;

- (MGPriceVariation)runOrRefreshPriceExperimentConsideringUserPremium:(BOOL)isUserPremium;

@end
</code></pre>

<p>The enumeration must respects the variations we configured in the A/B test platform. <code>MGPriceVariationNotAssigned</code> is the default variation, or the baseline variation, or in other words, the original configuration which was there before launching the experiment.<br/>
<code>MGPriceVariationNotEnrolled</code> is instead the default value of the property <code>priceVariation</code>, which means that the experiment has never been launched in that session.<br/>
Note also that when the experiment is performed, a pre-condition is passed to the method. In this case, our pre-condition is that the user has to be a free (not currently paying or not premium) user. Just in that case, the user will be allocated in the experiment, otherwise the experiment will be not enrolled and the session will not affect our final stats.<br/>
Let&rsquo;s see how this category is implemented:</p>

<pre><code class="objc">#import "MGExperimentsManager+PriceExperiment.h"

#import &lt;objc/runtime.h&gt;


static NSString * const kMGExperimentName = @"Price experiment";

static char const * const kMGPriceVariationProperty = "__kMGPriceVariationProperty";


@interface MGExperimentsManager ()

@property (readwrite) MGPriceVariation priceVariation;

@end


@implementation MGExperimentsManager (PriceExperiment)

- (MGPriceVariation)runOrRefreshPriceExperimentConsideringUserPremium:(BOOL)isUserPremium
{
    if (!isUserPremium) {
        __weak typeof (self) weakSelf = self;

        if (/* Check if is not Unit Test target */) {

            [self setBaselineVariation:^{
                weakSelf.priceVariation = MGPriceVariationNotAssigned;
            } forExperimentWithName:kMGExperimentName];

            [self setVariation:^{
                weakSelf.priceVariation = MGPriceVariationAssignedA;
            } withName:@"variation1" forExperimentName:kMGExperimentName];

            [self setVariation:^{
                weakSelf.priceVariation = MGPriceVariationAssignedB;
            } withName:@"variation2" forExperimentName:kMGExperimentName];

            [self runTest:kMGExperimentName];

        } else {
            weakSelf.priceVariation = MGPriceVariationNotAssigned;
        }

    } else {
        self.priceVariation = MGPriceVariationNotEnrolled;
    }

    return self.priceVariation;
}


#pragma mark - New properties

- (void)setPriceVariation:(MGPriceVariation)priceVariation
{
    objc_setAssociatedObject(self, kMGPriceVariationProperty, @(priceVariation) , OBJC_ASSOCIATION_RETAIN);
}

- (MGPriceVariation)priceVariation
{
    NSNumber *value = objc_getAssociatedObject(self, kMGPriceVariationProperty);
    return [value integerValue];
}
</code></pre>

<p>It does basically just 1 thing:<br/>
<strong>for any experiment&rsquo;s block, assign the corrispondant enumeration&rsquo;s value</strong>.<br/>
<br/>
Note that if the pre-condition is not respected, the value is set to <code>MGPriceVariationNotEnrolled</code>, which exactly means that the experiment has not been run.<br/>
Note also that there is a special <code>if</code> condition (Line 25), which prevents the experiment to be performed on a <strong>Unit Test</strong> target, setting the value always to <code>MGPriceVariationNotAssigned</code>.<br/>
This class, could also contain other properties and methods to support the experiment while running, avoiding to get the code dirty with &ldquo;temporary&rdquo; line of codes around the project.<br/>
Indeed, once the experiment will be finished, we&rsquo;ll just remove the <code>#import</code> and the relative calls from the classes who make use of it, without spending time (and introducing bug) finding the correct pieces of code to remove.</p>

<p><br/></p>

<h2>Example of usage</h2>

<pre><code class="objc">MGPriceVariation priceVariation = [[MGExperimentsManager sharedInstance] runOrRefreshLifetimeTestConsideringUserPremium:user.isPremium];

// User is premium
if (priceVariation == MGPriceVariationNotEnrolled) {
    return;
}

CGFloat price = 15.; // original price (MGPriceVariationNotAssigned)

switch (priceVariation) {
    case MGPriceVariationA:
        price = 25.;
        break;
    case MGPriceVariationB:
        price = 40.;
        break;
}

// ..code
</code></pre>

<p>Simple as that.<br/>
Note that once the experiment has been run, you can access the value without uselessly passing through the A/B test framework, by reading the property: <code>[MGExperimentsManager sharedInstance].priceVariation</code>.<br/>
<br/>
We could also be in situations where we need to check multiple experiments at the same time, and in these cases our architecture it&rsquo;s really helpful.<br/>
For example:</p>

<pre><code class="objc">BOOL userIsInExperimentA = 
[MGExperimentsManager sharedInstance].variationExperimentA != MGExperimentAVariationNotEnrolled;

BOOL userIsInExperimentBVariationA = 
[MGExperimentsManager sharedInstance].variationExperimentB == MGExperimentBVariationAssignedA;

if (!userIsInExperimentA &amp;&amp; userIsInExperimentBVariationA)  {
    // do something
} else if (userIsInExperimentA) {
    // do something else
} else {
    // do something else
}
</code></pre>

<p><br/>
This is an example of how much I reduced the code in a class where there were 2 nested experiments running together, using the described approach (highlighted lines):</p>

<p style="text-align:center;"> <img src="/../images/posts/ab-tests/1.jpg" height="400" alt="Experiment Manager Refactor" /></p>

<p>The code on the left side, is using the experiment manager approach. The (2.5x) code on the right side, is not using it.</p>

<p><br/></p>

<h2>Conclusion</h2>

<p>Happy A/B tests!<br/>
<br/>
Cheers ;)<br/>
<br/>
<strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a TableView(Controller) Architecture]]></title>
    <link href="http://matteogobbi.github.io/blog/2015/03/22/anatomy-of-a-tableview-controller-architecture/"/>
    <updated>2015-03-22T03:09:15+01:00</updated>
    <id>http://matteogobbi.github.io/blog/2015/03/22/anatomy-of-a-tableview-controller-architecture</id>
    <content type="html"><![CDATA[<p><code>UITableView</code>s are part of our projects since the very beginning of the iOS SDK. But even if they are kind of our &ldquo;old friends&rdquo;, many of us still don&rsquo;t use them properly. No, wait. I know you use them to &ldquo;show cells&rdquo;, of course. For &ldquo;properly&rdquo; I mean: in a <strong>well architected way</strong>.</p>

<!--more-->


<p><br /></p>

<h2>The most diffused &ldquo;wrong&rdquo; approach</h2>

<p>When developers need to use a <code>UITableView</code>, they put it normally in a <code>UIViewController</code>, or <code>UITableViewController</code>. At this point the first thing they do in the <strong>ViewController</strong> is:</p>

<pre><code class="objc">self.tableView.delegate = self;
self.tableView.datasource = self;
</code></pre>

<p>setting the class conform to these two protocols.</p>

<p><strong>Not</strong> really a big deal.<br />
Let’s discuss some better ways to structure our code.</p>

<p>First of all we have to understand the difference between <code>UITableViewDelegate</code> and <code>UITableViewDataSource</code> or in a more general sense, the difference between <strong>delegate</strong> and <strong>datasource</strong>;
Secondly we should reflect about what a <strong>ViewController</strong> should take care of.
<br />
<br /></p>

<h2>Understanding the roles</h2>

<p>In order to have a clear vision of how to build a strong architecture, we  first have to understand what is a delegate, and what is a datasource.<br/>
<br />
<strong>Delegation</strong> is a pattern used to send a message from an object (the delegating), to another object (the delegate), and as Apple says:</p>

<blockquote>
The message informs the delegate of an event that the delegating object is about to handle or has just handled.
</blockquote>


<p>So in the <code>UITableView</code>&rsquo;s case, its delegate is called when an user taps a cell, or adds/deletes/moves it, etc.<br/>
<br />
The <strong>datasource</strong> is the object responsible for managing the content you are presenting for example in a table or collection view. His main task is to <strong>return the data which will be displayed by the table view</strong>.<br/>
<br />
So we can imagine the table view asking to his datasource questions like:</p>

<ul>
<li>How many sections shall I have?</li>
<li>For a given section, how many rows shall I display for it?</li>
<li>For a given section, what title shall I display for it?</li>
</ul>


<p>and so on&hellip;<br/>
<br />
Now the question (and also one of the main point of this text) is:<br/>
<strong>should the ViewController be responsible of all this being both, tableView&rsquo;s delegate and datasource as well as, I repeat, the <u>view controller</u></strong>?
<br /><br/>
What the view controller should effectly take care of?<br/>
<br />
Since the initial Apple tutorials back to 2008, developers took the habit to put everything into the view controller, bringing the whole tech community to joke about this buckling the famous pattern and acronym <strong>MVC</strong>, the meaning of &ldquo;<strong>Massive</strong> View Controller&rdquo; instead of &ldquo;Model View Controller&rdquo;.<br/>
So the answer to the previous question as maybe you can imagine is a most likely <strong>NO</strong>.<br/>
<br />
The <strong>ViewController</strong>, should indeed be responsible to interact with other entities as for example the network layer or the data model, providing then the data to the view (or to the ViewModel as in the MVVM design pattern). Moreover, it should handle the final actions performed from the user on the view.<br/>
<br />
In the <code>UITableView</code>&rsquo;s case, is the <strong>TableView</strong>&rsquo;s <strong>delegate</strong> to handle the actions performed on the table, following for example this process:</p>

<ol>
<li>1 - An user taps a cell;</li>
<li>2 - The table view delegate handles the tap;</li>
<li>3 - The delegate does something and if needed it will call the final action in the view controller.</li>
</ol>


<p>Don&rsquo;t worry about the third point, we&rsquo;ll see how to sort it out shortly.
<br />
<br /></p>

<h2>Building the architecture</h2>

<p>After this (too) long introduction, it&rsquo;s time to discover the core of this article: <strong>how to build an efficient architecture</strong>.<br/>
<br />
The standard architecture we have when we create a <code>UIViewController</code> with inside a <code>UITableView</code>, is basically the following:</p>

<p style="text-align:center;"> <img src="/../images/posts/anatomy-architecture/1.png" alt="Basic" /></p>

<p>Well, a simple view controller with his view, and an <code>IBOutlet</code> to the <code>UITableView</code> (or a reference in code, but let&rsquo;s take is simple).<br/>
The next step, would be to understand how and where we want to istantiate the <strong>delegate</strong> and the <strong>datasource</strong>. This is absolutely the main point of our architecture, as we want a <strong>net separation</strong> between these objects, so that everyone has its own responsabilities. Therefore what we need is a <strong>custom delegate</strong>, and a <strong>custom datasource</strong>. These will be respectively conform to <code>UITableViewDelegate</code> and <code>UITableViewDatasource</code>:</p>

<pre><code class="objc">@interface MGTableViewDelegate : NSObject &lt;UITableViewDelegate&gt;
...
@end



@interface MGTableViewDatasource : NSObject &lt;UITableViewDataSource&gt;
...
@end
</code></pre>

<p>But who should instantiate and own these 2?</p>

<p>The answer may vary, but having them into the <strong>ViewController</strong> is totally acceptable and we are going for taking this choice.</p>

<p>As controller of the view and principal &ldquo;manager&rdquo;, it will own and set them as delegate and datasource of our <code>UITableView</code>:</p>

<pre><code class="objc">MGTableViewDelegate *myDelegate = [MGTableViewDelegate new];
MGTableViewDatasource *myDatasource = [MGTableViewDatasource new];

self.tableView.delegate = myDelegate;
self.tableView.datasource = myDatasource;
</code></pre>

<p>Therefore, at this point our architecture should look like this:</p>

<p style="text-align:center;"> <img src="/../images/posts/anatomy-architecture/2.png" alt="Delegate and Datasource" /></p>

<p>Let&rsquo;s also suppose to have a custom <strong>headerView</strong> for the <code>UITableView</code>:</p>

<pre><code class="objc">@interface MGTableHeaderView : UIView
...
@end
</code></pre>

<p>as well as some cell to display:</p>

<p style="text-align:center;"> <img src="/../images/posts/anatomy-architecture/3.png" alt="TableView Header and Cells" /></p>

<p>Good.<br/>
The architecture begins to take shape. We have almost all the pieces.<br/>
We know that the delegate will take care of the tableView&rsquo;s events, but <strong>how will the datasource generate the data for the tableView</strong>?</p>

<p>The datasource has to generate the necessary data using the available information. Sharing this information, is <strong>ViewController</strong>&rsquo;s. Indeed, it could pass the reference to this data at the moment of the datasource initialization.<br/>
So let&rsquo;s go back some lines and let&rsquo;s refactor our code, supposing that the data we want to pass to the datasource is a <strong>user</strong> data object:</p>

<pre><code class="objc">MGTableViewDelegate *myDelegate = [MGTableViewDelegate new];
MGTableViewDatasource *myDatasource = [MGTableViewDatasource datasourceWithUser:user];

self.tableView.delegate = myDelegate;
self.tableView.datasource = myDatasource;
</code></pre>

<p>Cool. So let&rsquo;s have a look at the final architecture:</p>

<p style="text-align:center;"> <img src="/../images/posts/anatomy-architecture/4.png" alt="TableView Header and Cells" /></p>

<p>Now the datasource can use this data to generate and return cells for the <strong>TableView</strong> throught the method <code>- tableView:cellForRowAtIndexPath:</code> called from the latter.</p>

<p>The user DTO object contains common info like:</p>

<ul>
<li>name;</li>
<li>surname;</li>
<li>gender;</li>
<li>birthday;</li>
<li>address;</li>
</ul>


<p>and so on.<br/>
As we said above, the responsibility of the datasource is to manipulate these information displaying them into the appropriate cells.</p>

<p><strong>But which is the best approach to achieve this result?</strong></p>

<p>In one of my previous articles, I wrote about <a href="http://matteogobbi.github.io/blog/2014/10/31/interaction-object/">Interaction Objects</a>.<br/>
An <strong>InteractionObject</strong> is a component which can store all the information needed to configure a cell, i.e.:</p>

<ul>
<li>image;</li>
<li>title;</li>
<li>value;</li>
<li>target;</li>
<li>selector;<br/>
..etc.</li>
</ul>


<p>An example of <strong>InteractionObject</strong>, is something like this:</p>

<pre><code class="objc">MGInteractionObject *objGender = [[MGInteractionObject alloc]
                                initWithOption:@"Gender"
                                value:_user.gender
                                imageURLString:nil
                                editable:NO
                                target:_viewController
                                selector:@selector(mg_changeGender:)];
</code></pre>

<p>(as you see, the target is a <strong>ViewController</strong>, which in this case could be passed for example during the datasource&rsquo;s initialization, using a <code>weak</code> reference).</p>

<p>Once that the datasource has configured these objects, it will store them into an hierarchy of arrays, ready to be showed in the right <code>indexPath</code>:</p>

<pre><code class="objc">//InteractionObject for rows in the section profile
NSArray *profileSection = @[objCountry, objGender, objCity, objOccupation, objAbout];

//InteractionObject for rows in the section logout
NSArray *logoutSection = @[objLogout];

//Final array of section
_arrayDatasource = @[profileSection, logoutSection];
</code></pre>

<p>Here is the image rapresenting the final architecture:</p>

<p style="text-align:center;"> <img src="/../images/posts/anatomy-architecture/5.png" alt="Interaction Objects inside" /></p>

<p>Finally, as we want to be able to update our <strong>InteractionObject</strong>s as well as reloading the <strong>headerView</strong> and <strong>cells</strong>, we have to override the method <code>- reloadData</code> of the <code>UITableView</code>, subclassing the latter:</p>

<pre><code class="objc">//Implementation file of the MGTableView's class inherited from UITableView

- (void)reloadData
{
    MGTableViewDatasource *datasource = self.dataSource;

    //Update datasource
    [datasource updateData];

    [super reloadData];

    //Get the interactionObject for the headerView
    MGInteractionObject *objHeader = [datasource headerInteractionObject];

    //Update the headerView
    if (!self.tableHeaderView) {
        //Do init
        MGTableViewHeader *headerView = [MGTableViewHeader headerViewFromNib];
        self.tableHeaderView = headerView;
    }

    [(MGTableViewHeader *)self.tableHeaderView configureWithHeaderInteractionObject:objHeader];
}
</code></pre>

<p>When this method is called, firstly is called <code>[datasoure updateData]</code>, which reading from the data object (in our previous example, the user), regenerate all the <strong>InteractionObjects</strong>, included the one for the <strong>headerView</strong>.</p>

<p>Well, let&rsquo;s recap a little bit:</p>

<ol>
<li>1 - the <strong>ViewController</strong> creates the <code>UITableView</code>&rsquo;s <strong>delegate</strong> and <strong>datasource</strong> as separated components;</li>
<li>2 - the method <code>- reloadData</code> is called on the <strong>TableView</strong>;</li>
<li>3 - from the previous point, the <strong>datasource</strong> gets updated creating all the needed <strong>InteractionObject</strong>s by the information contained in the <strong>DataObject</strong>;</li>
<li>4 - calling <code>[super reloadData]</code> the method <code>- tableView:cellForRowAtIndexPath:</code> gets invoked from the <strong>TableView</strong>, and the cells are configured passing to anyone the corresponding <strong>InteractionObject</strong>;</li>
<li>5 - the <strong>headerView</strong> is updated.</li>
</ol>


<p>The last thing I would like to stress, is the simplicity of the method which should handle a tap on a cell:</p>

<pre><code class="objc">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    MGTableViewDatasource *datasource = 
        (MGTableViewDatasource *)tableView.dataSource;

    MGInteractionObject *interactionObj = 
        [datasource cellInteractionObjectAtIndexPath:indexPath];

    //Execute target/selector
    if ([interactionObj.target respondsToSelector:interactionObj.selector]) {
        [interactionObj.target performSelector:interactionObj.selector 
                                    withObject:nil afterDelay:0.f];
    }

    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}
</code></pre>

<p>which the only thing it does, is getting the corresponding <strong>InteractionObject</strong> for that <code>indexPath</code>,  reading the contained information to perform then a <strong>selector</strong> on a <strong>target</strong>.</p>

<p><br />
<br /></p>

<h2>Conclusion</h2>

<p>Following the architecture explained in this article, your project folder hierarchy should look something like this:</p>

<p style="text-align:center;"> <img src="/../images/posts/anatomy-architecture/project.png" height="500" alt="Project hierachy" /></p>

<p>The best thing of this approach, is the architecture really scalable and maintanable. Even if after some months you&rsquo;ll need to add another cell in one of the TableView&rsquo;s section, the only thing you&rsquo;ll do will be creating another <strong>InteractionObject</strong>, letting <strong>every component</strong> doing its job and <strong>without touching any kind of method</strong>.<br/>
<br />
Thanks to <a href="http://twitter.com/albertodebo">Alberto De Bortoli</a> for the review of this article.</p>

<p><strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!</p>

<p>Enjoy ;)</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interaction Object]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/10/31/interaction-object/"/>
    <updated>2014-10-31T00:16:22+01:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/10/31/interaction-object</id>
    <content type="html"><![CDATA[<p>As a developer I often find myself in the situation where I have to face the problem to store and get some kind of information in the most possible handy way.<br/>
In particular, this happens when you design a static menu list (e.g side panel or harburger menu) using a <code>UITableView</code>.</p>

<p>In this article I will go to explain how to implement it using the concept of <strong>Interaction Object</strong> in order to keep our code clean and testable.</p>

<!--more-->


<p><br/></p>

<h2>The problem</h2>

<p>In my last two companies I used to work, I was in the situation to create a menu list like so:</p>

<p style="text-align:center;"> <img src="/../images/posts/interaction-object/1.jpg" height="300" alt="Hamburger Menu" /></p>

<p>As a static menu, it was not populated from any datasource, therefore I thought &ldquo;<strong>what is the best way to represent the menu items?</strong>&rdquo;.<br/>
A naïve and rude approach would be something like:</p>

<pre><code class="objc">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    switch (indexPath.row) {

        //....get/create a cell etc.

        case 0: 
        {
            cell.title = @"Home";
            break;
        }

        case 1: 
        {
            cell.title = @"Favourites";
            break;
        }

        //...
    }

    //..

    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    switch (indexPath.row) {

        case 0: 
        {
            [self goToHome];
            break;
        }

        case 1: 
        {
           [self goToFavourites];
            break;
        }

        //...
    }

    //..
}
</code></pre>

<p>&hellip;&hellip;</p>

<p style="text-align:center;"> <img src="/../images/posts/interaction-object/2.gif" height="300" alt="Shit" /></p>

<p>Yes, that’s ugly and not scalable.</p>

<p>What if you want to add another cell later? And if you want the new cell to be somewhere in the middle? You’d have to change every case&rsquo;s number. What if you want to display different cells according with a condition (i.e. user/admin)?</p>

<p>In short, this is not a good approach at all. So… how can we go with this?</p>

<p><br/></p>

<h2>The solution</h2>

<p>As a menu, any cell needs 3 basic and fundamental things:</p>

<ul>
<li>An image;</li>
<li>A title;</li>
<li>An action.</li>
</ul>


<p>The idea is to have a component (<strong>MGInteractionObject</strong>, precisely) to store these information, and having then an array of these components in order to associate them to the cells. Moreover, this approach will give us the opportunity to manage the array, choosing which items to show and which not to, according to certain events or conditions.</p>

<p>Therefore, the header file would look similar to:</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;

typedef void(^performBlock)();

typedef NS_ENUM(NSUInteger, MGActionType) {
    MGActionTypeBlock        = 1,
    MGActionTypeSelector
};

@interface MGInteractionObject : NSObject

@property (copy, nonatomic, readonly) NSString *title;
@property (copy, nonatomic, readonly) NSString *imageName;

@property (assign, nonatomic, readonly) MGActionType actionType;
@property (assign, nonatomic, readonly) SEL selector;
@property (copy, nonatomic, readonly) performBlock block;

- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName selector:(SEL)selector;
- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName performBlock:(performBlock)block;

@end
</code></pre>

<p>Basically, as I said, we store a <strong>title</strong> for the menu item, an <strong>image</strong> and an <strong>action</strong>, which will be performed by a <strong>block</strong>, or by a <strong>selector</strong> when the user taps on the menu entry. Finally, we have an <strong>enumeration</strong> in order to present to the developer the different ways to perform the action.<br/>
For simplicity, here I reported just some basic information to store, but it could be expanded a lot further, for example with the following properties:</p>

<pre><code class="objc">@property (copy, nonatomic, readonly) NSString *highlightedTitle;
@property (copy, nonatomic, readonly) NSString *highlightedImageName;
@property (strong, nonatomic, readonly) UIColor *backgroundColor;
@property (strong, nonatomic, readonly) UIColor *highlightedBackgroundColor;
//..etc
</code></pre>

<p>Now that we the header is defined, it&rsquo;s the time to have start move on to the implementation:</p>

<p>Now that we know the header, it&rsquo;s the time to have a look to the implementation code:</p>

<pre><code class="objc">#import "MGInteractionObject.h"

@implementation MGInteractionObject

#pragma mark - Public init
- (id)init {
    @throw [NSException
        exceptionWithName:NSInternalInconsistencyException
                   reason:@"Must use initWithTitle:imageName:selector: or initWithTitle:imageName:performBlock:"
                 userInfo:nil];
}

- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName selector:(SEL)selector
{
    return [self initWithTitle:title imageName:imageName selector:selector performBlock:nil];
}

- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName performBlock:(performBlock)block
{
    return [self initWithTitle:title imageName:imageName selector:nil performBlock:block];
}

#pragma mark - Private init
- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName selector:(SEL)selector performBlock:(performBlock)block
{
    if (self = [super init]) {
        _title = [title copy];
        _imageName = [imageName copy];
        _selector = selector;
        _block = [block copy];

        _actionType = (selector) ? MGActionTypeSelector : MGActionTypeBlock;
    }
    return self;
}

@end
</code></pre>

<p>Simple as that.<br/>
Now that we have the base element, let’s proceed to use it properly.<br/>
<br/></p>

<h2>How to use it</h2>

<p>What we need to do now, is to create an interaction object for each menu item.<br/>
Supposing to have <strong>4 items</strong>:</p>

<ul>
<li>Home;</li>
<li>Favourites;</li>
<li>Stores;</li>
<li>Admin options.</li>
</ul>


<p>we can simply go to create <strong>4 interaction objects</strong> like these:</p>

<pre><code class="objc">- (void)mg_createMenuInteractionItemsForUser:(MGUser *)user
{

    __weak typeof (self) weakSelf = self;

    MGInteractionObject *objHome = 
        [[MGInteractionObject alloc] initWithTitle:@"Home"
                                         imageName:@"icon_home" 
                                   performSelector:@selector(openHome)];

    MGInteractionObject *objFavourites = 
        [[MGInteractionObject alloc] initWithTitle:@"Favourites"
                                         imageName:@"icon_favourites" 
                                      performBlock:^{
                                                    //Do something    
                                                    }];

    MGInteractionObject *objStores = 
        [[MGInteractionObject alloc] initWithTitle:@"Stores"
                                         imageName:@"icon_stores" 
                                   performSelector:@selector(openStores)];


    //Prepare tableButtons
    NSArray *tableButtons;
    if(user.isAdmin) {

        MGInteractionObject *objAdmin = 
            [[MGInteractionObject alloc] initWithTitle:@"Admin options"
                                             imageName:@"icon_admin" 
                                          performBlock:^{
                                                        //Do something        
                                                        }];

        tableButtons = @[
                        objHome,
                        objFavourites,
                        objStores,
                        objAdmin
                        ];
    } else {
        tableButtons = @[
                        objHome,
                        objFavourites,
                        objStores
                        ];
    }

    return tableButtons;
}
</code></pre>

<p>Having these 4 objects, we return an array of <code>MGInteractionObject</code>, according with the conditions we want to consider. In this example, it is checked if the user is an admin (<code>user.isAdmin</code>) to decide <strong>if add or not the admin interaction object</strong>, in the array <code>tableButtons</code>.</p>

<p>Now all we need to do yet is to reload the tableview to show the content. Here is the implementation of <code>tableView:cellForRowAtIndexPath:</code></p>

<pre><code class="objc">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *cellIdentifier = @"InteractionCell";

    MGInteractionCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];

    if(!cell) {
        cell = [[MGInteractionCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];
    }

    //Get the interaction object
    MGInteractionObject *interactionObject = _tableButtons[indexPath.row];

    //Set the interaction object for this cell to configure it
    cell.interactionObject = interactionObject;

    return cell;
}
</code></pre>

<p>Here we are using a custom cell <code>MGInteractionCell</code> which has the property <code>interactionObject</code>, which through the <strong>setter</strong> method, configures the cell.</p>

<p>Obviously, it could be also used a normal <code>UITableViewCell</code> setting the <code>title</code> and the <code>image</code> directly from this method.</p>

<p>Finally, when a user taps on a cell, the method <code>tableView:didSelectRowAtIndexPath:</code> is called:</p>

<pre><code class="objc">-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    //Get the interaction object
    MGInteractionObject *interactionObject = _tableButtons[indexPath.row];

    //Perform the block or the selector
    switch (interactionObject.interactionType) {
        case MGActionTypeBlock:
            interactionObject.block();
            break;
        case MGActionTypeSelector: {
            if ([self respondsToSelector:interactionObject.selector]) {
                [self performSelector:interactionObject.selector withObject:nil];
            }
            break;
        }
    }
}
</code></pre>

<p>Here we check the interaction type and make a call to the block or perform the selector.</p>

<p>And..</p>

<p>..that&rsquo;s it!</p>

<p style="text-align:center;"> <img src="/../images/posts/interaction-object/3.gif" height="300" alt="Happy" /></p>

<p><strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!</p>

<p>Enjoy! ;)</p>
]]></content>
  </entry>
  
</feed>
