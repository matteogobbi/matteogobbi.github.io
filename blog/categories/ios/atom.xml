<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Matteo Gobbi]]></title>
  <link href="http://matteogobbi.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://matteogobbi.github.io/"/>
  <updated>2014-11-11T23:01:10+00:00</updated>
  <id>http://matteogobbi.github.io/</id>
  <author>
    <name><![CDATA[Matteo Gobbi]]></name>
    <email><![CDATA[job@matteogobbi.it]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interaction Object]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/10/30/interaction-object/"/>
    <updated>2014-10-30T23:16:22+00:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/10/30/interaction-object</id>
    <content type="html"><![CDATA[<p>Many times in your projects, you are in the situation in which you need to store something in some way, in order to use it in the most efficient way possible.
In detail, sometime happen that you need to create a hamburger menu or a list of pretty static items, using a <code>UITableView</code>.</p>

<p>In this article I will go to consider a recurrent situation, showing how to implement and follow the very easy approach to have a set of <strong>Interaction Object</strong>, making our code clean and testable.</p>

<!--more-->


<p><br/></p>

<h2>The problem</h2>

<p>In my last two companies, I have been in the situation to create a hamburger menu using a <code>UITableView</code>, like this:</p>

<p style="text-align:center;"> <img src="/../images/posts/interaction-object/1.jpg" height="300" alt="Hamburger Menu" /></p>

<p>As a pretty static menu, it was not fetched from any datasource, therefore I thought &ldquo;<strong>what is the best method to represent the menu items?</strong>&rdquo;.<br/>
A na√Øve and rude approach would be something like:</p>

<pre><code class="objc">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    switch (indexPath.row) {

        //....get/create a cell etc.

        case 0: 
        {
            cell.title = @"Home";
            break;
        }

        case 1: 
        {
            cell.title = @"Favourites";
            break;
        }

        //...
    }

    //..

    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    switch (indexPath.row) {

        case 0: 
        {
            [self goToHome];
            break;
        }

        case 1: 
        {
           [self goToFavourites];
            break;
        }

        //...
    }

    //..
}
</code></pre>

<p>&hellip;&hellip;</p>

<p style="text-align:center;"> <img src="/../images/posts/interaction-object/2.gif" height="300" alt="Shit" /></p>

<p>Yes, it is dirty and not scalable.</p>

<p>What if you want add another cell then? And if you want the new cell be somewhere in the middle? You should change every case&rsquo;s number. What if you want display different cells in according with a condition (i.e. user/admin)?</p>

<p>In short, this is not a good approach at all. So..how?</p>

<p><br/></p>

<h2>The solution</h2>

<p>As a menu, any cell needs 3 basic and foundamental things:</p>

<ul>
<li>An image;</li>
<li>A title;</li>
<li>An action.</li>
</ul>


<p>The idea is to have a component (<strong>MGInteractionObject</strong>, precisely) to store these informations, and having then an array of these components in order to associate them to the cells. Moreover, this approach will give us the opportunity to manage the array, choosing wich items show and wich not in according with certain events or conditions.</p>

<p>Therefore, the header file would looks something like:</p>

<pre><code class="objc">#import &lt;Foundation/Foundation.h&gt;

typedef void(^performBlock)();

typedef NS_ENUM(NSUInteger, MGActionType) {
    MGActionTypeBlock        = 1,
    MGActionTypeSelector
};

@interface MGInteractionObject : NSObject

@property (copy, nonatomic, readonly) NSString *title;
@property (copy, nonatomic, readonly) NSString *imageName;

@property (assign, nonatomic, readonly) MGActionType actionType;
@property (assign, nonatomic, readonly) SEL selector;
@property (copy, nonatomic, readonly) performBlock block;

- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName selector:(SEL)selector;
- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName performBlock:(performBlock)block;

@end
</code></pre>

<p>Basically, as I said, we store a <strong>title</strong> for the menu item, an <strong>image</strong> and an <strong>action</strong>, which might be performed by a <strong>block</strong>, or by a <strong>selector</strong>. Finally, we have an <strong>enumeration</strong> in order to present to the developer the different ways to perform the action.<br/>
Of course, here I reported just some basic information to store, but it could be expanded a lot, for example with the following properties:</p>

<pre><code class="objc">@property (copy, nonatomic, readonly) NSString *highlightedTitle;
@property (copy, nonatomic, readonly) NSString *highlightedImageName;
@property (strong, nonatomic, readonly) UIColor *backgroundColor;
@property (strong, nonatomic, readonly) UIColor *highlightedBackgroundColor;
//..etc
</code></pre>

<p>Now that we know the header, it&rsquo;s the time to have a look to the implementation code:</p>

<pre><code class="objc">#import "MGInteractionObject.h"

@implementation MGInteractionObject

#pragma mark - Public init
- (id)init {
    @throw [NSException
        exceptionWithName:NSInternalInconsistencyException
                   reason:@"Must use initWithTitle:imageName:selector: or initWithTitle:imageName:performBlock:"
                 userInfo:nil];
}

- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName selector:(SEL)selector
{
    return [self initWithTitle:title imageName:imageName selector:selector performBlock:nil];
}

- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName performBlock:(performBlock)block
{
    return [self initWithTitle:title imageName:imageName selector:nil performBlock:block];
}

#pragma mark - Private init
- (instancetype)initWithTitle:(NSString *)title imageName:(NSString *)imageName selector:(SEL)selector performBlock:(performBlock)block
{
    if(self = [super init]) {
        _title = [title copy];
        _imageName = [imageName copy];
        _selector = selector;
        _block = [block copy];

        _actionType = (selector) ? MGActionTypeSelector : MGActionTypeBlock;
    }
    return self;
}

@end
</code></pre>

<p>Simple and easy.</p>

<p>Now we have the base element. Let&rsquo;s proceed to properly use it.</p>

<p><br/></p>

<h2>How to use it</h2>

<p>What we need to do now, is to create an interaction object for each menu item.<br/>
Supposing to have <strong>4 items</strong>:</p>

<ul>
<li>Home;</li>
<li>Favourites;</li>
<li>Stores;</li>
<li>Admin options.</li>
</ul>


<p>we should simply go to create <strong>4 interaction objects</strong> like these:</p>

<pre><code class="objc">- (void)mg_createMenuInteractionItemsForUser:(MGUser *)user
{

    __weak typeof (self) weakSelf = self;

    MGInteractionObject *objHome = 
        [[MGInteractionObject alloc] initWithTitle:@"Home"
                                         imageName:@"icon_home" 
                                   performSelector:@selector(openHome)];

    MGInteractionObject *objFavourites = 
        [[MGInteractionObject alloc] initWithTitle:@"Favourites"
                                         imageName:@"icon_favourites" 
                                      performBlock:^{
                                                    //Do something    
                                                    }];

    MGInteractionObject *objStores = 
        [[MGInteractionObject alloc] initWithTitle:@"Stores"
                                         imageName:@"icon_stores" 
                                   performSelector:@selector(openStores)];


    //Prepare tableButtons
    NSArray *tableButtons;
    if(user.isAdmin) {

        MGInteractionObject *objAdmin = 
            [[MGInteractionObject alloc] initWithTitle:@"Admin options"
                                             imageName:@"icon_admin" 
                                          performBlock:^{
                                                        //Do something        
                                                        }];

        tableButtons = @[
                        objHome,
                        objFavourites,
                        objStores,
                        objAdmin
                        ];
    } else {
        tableButtons = @[
                        objHome,
                        objFavourites,
                        objStores
                        ];
    }

    return tableButtons;
}
</code></pre>

<p>Having these 4 objects, we return an array of <code>MGInteractionObject</code>, in according with the conditions we want to consider. In this example, it is checked if the user is an admin (<code>user.isAdmin</code>) to decide <strong>if add or not the admin interaction object</strong>, in the array <code>tableButtons</code>.</p>

<p>At this point the last step is just to reload the table getting the tableView&rsquo;s cells:</p>

<pre><code class="objc">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *cellIdentifier = @"InteractionCell";

    MGInteractionCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];

    if(!cell) {
        cell = [[MGInteractionCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];
    }

    //Get the interaction object
    MGInteractionObject *interactionObject = _tableButtons[indexPath.row];

    //Set the interaction object for this cell to configure it
    cell.interactionObject = interactionObject;

    return cell;
}
</code></pre>

<p>Here it is used a custom cell <code>MGInteractionCell</code> which has the property <code>interactionObject</code>, which throught the <strong>setter</strong> method, configure the cell.<br/>
Obviously, it could be also used a normal <code>UITableViewCell</code> setting the <code>title</code> and the <code>image</code> directly from this method.</p>

<p>Finally, when a user touch a cell, it is called <code>tableView:didSelectRowAtIndexPath:</code>:</p>

<pre><code class="objc">-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    //Get the interaction object
    MGInteractionObject *interactionObject = _tableButtons[indexPath.row];

    //Perform the block or the selector
    switch (interactionObject.interactionType) {
        case MGActionTypeBlock:
            interactionObject.block();
            break;
        case MGActionTypeSelector: {
            if ([self respondsToSelector:interactionObject.selector]) {
                [self performSelector:interactionObject.selector withObject:nil];
            }
            break;
        }
    }
}
</code></pre>

<p>where it is checked if <strong>perform the block</strong> or <strong>perform the selector</strong>.</p>

<p>And..</p>

<p>..that&rsquo;s it!</p>

<p style="text-align:center;"> <img src="/../images/posts/interaction-object/3.gif" height="300" alt="Happy" /></p>

<p>Enjoy! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autorelease - Under the Hood]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/09/28/autorelease-under-the-hood/"/>
    <updated>2014-09-28T23:24:37+01:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/09/28/autorelease-under-the-hood</id>
    <content type="html"><![CDATA[<p>Since this is an argument less touched but much important, I decided to write an article to organize the informations and explain how <code>autorelease</code>, or better <strong>autorelease pool</strong> works.</p>

<p>The main goal of this article is not to explain the base of what is an <strong>autorelease pool</strong> and when <code>autorelease</code> should be used, but anyway, this is really important to understand these concepts before proceeding. For this reason, the first paragraph will be dedicated to explain them. Experts developers, can safely skip it if they want.</p>

<!--more-->


<p>
<br /></p>

<h2>What and when</h2>

<p>As the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html">Apple documentation</a> says:</p>

<blockquote>
Autorelease pool blocks provide a mechanism whereby you can relinquish ownership of an object, but avoid the possibility of it being deallocated immediately (such as when you return an object from a method). Typically, you don‚Äôt need to create your own autorelease pool blocks, but there are some situations in which either you must or it is beneficial to do so.
</blockquote>


<p>Let&rsquo;s look at a couple of examples:</p>

<p>Before <strong>ARC</strong>, there was our much less friend called <strong><a href="https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html">MRC</a></strong>, which stands for <strong>Manual Reference Counting</strong>. Even if today it is still present on XCode, it is not longer used and the &ldquo;bad job&rdquo; of using <code>retain</code>, <code>release</code> and <code>autorelease</code>,  is left to the compiler.
But let&rsquo;s think for a while to be in a MRC environment and to have these methods:</p>

<pre><code class="objc">/* MGClassA */
- (void)method
{
    MGClassB *objB = [MGClassB new];

    NSObject *newObj = [objB getAnObject];

    //do something..

    [objB release];
}


/* MGClassB */
- (NSObject *)getAnObject
{
    NSObject *newObj = [NSObject new];

    return newObj;
}
</code></pre>

<p>in the first method, an object typed <code>MGClassB</code> is allocated and temporary retained from the object of type <code>MGClassA</code>; then <code>objB</code> is asked to allocate, initialize and return a new object. So at this point we have this situation:</p>

<p><code>objA</code>  &mdash;<strong>retains</strong>&mdash;>  <code>objB</code></p>

<p><code>objB</code>  &mdash;<strong>retains</strong>&mdash;>  <code>newObj</code></p>

<p>please note that <code>objA</code> is not calling <code>retain</code> after having obtained <code>newObj</code>, so it has no ownership and <code>newObj</code> still has a retain count equals to 1.<br/>
At this point, <code>method</code> finishes and releases <code>objB</code>, which is not referenced anymore and it is still retaining <code>newObj</code>. This object will therefore remains allocated in memory generating the famous <strong>memory leak</strong>. From <a href="https://developer.apple.com/library/ios/documentation/performance/conceptual/managingmemory/articles/FindingLeaks.html">Apple documentation</a></p>

<blockquote>
Memory leaks are blocks of allocated memory that the program no longer references.
</blockquote>


<p>This means that being <code>newObj</code> just pointed from <code>objB</code>, but being <code>objB</code> NOT pointed from anyone, it will be no longer possible have a reference to release <code>newObj</code> which will remain allocated until the application will be not closed.</p>

<p>How can we solve this issue?
<code>autorelease</code>, keep the object alive for a period of time. Then, the object is automatically released, avoiding so, a memory leak:</p>

<pre><code class="objc">/* MGClassB */
- (NSObject *)getAnObject
{
    NSObject *newObj = [NSObject new];

    return [newObj autorelease];
}
</code></pre>

<p>In the next paragraph we will go in depth explaining why in this example doesn&rsquo;t appear an <strong>autorelease pool</strong>, but before, let&rsquo;s go to have a look to another situation where you need to create that.<br/>
An <strong>autorelease pool</strong> is a container where autoreleased objects are placed. When the pool is drained, every object in the container is released. This could be very useful in a situation like this:</p>

<pre><code class="objc">- (NSObject *)method
{
    for (int i = 0; i &lt; 10000; i++) {
        NSAutoreleasePool *myPool = [NSAutoreleasePool new];

        /* Do something that creates a lot of temporary objects autoreleased. */

        [myPool drain];
    }
}
</code></pre>

<p>that in the modern <strong>Objective-C</strong> becomes:</p>

<pre><code class="objc">- (NSObject *)method
{
    for (int i = 0; i &lt; 10000; i++) {
        @autoreleasepool {

            /* Do something that creates a lot of temporary objects autoreleased. */

        }
    }
}
</code></pre>

<p>This cyle, is executed 10.000 times. You maybe don&rsquo;t know how many objects will be allocated in your code, but without using <code>@autoreleasepool</code>, the memory would be filled with a lot of objects allocations, that instead at the end of each cycle would be no longer used. This could have an impact on the the performance of the app and could cause risk of memory warnings.<br/>
Using <code>@autoreleasepool</code>, objects would be instead released at the end of the autorelease&rsquo;s scope.</p>

<p>Note that with ARC, you can&rsquo;t call <code>release</code> or <code>autorelease</code>, so having <code>@autoreleasepool</code> sometime is even more useful.
<br />
<br /></p>

<h2>Under the hood</h2>

<p>We know that an object which is autoreleased, goes in an autorelease pool, but keep in mind this example:</p>

<pre><code class="objc">/* MGClassB */
- (NSObject *)getAnObject
{
    NSObject *newObj = [NSObject new];

    return [newObj autorelease];
}
</code></pre>

<p>the question is: <strong>what autorelease pool does <code>newObj</code> go in?</strong><br/>
The answer is easy, and it is in the file named <code>main.m</code> in the folder <code>Supporting Files</code> of any XCode project:</p>

<pre><code class="objc">int main(int argc, char * argv[]) {
    @autoreleasepool {
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    }
}
</code></pre>

<p>Yes, the <code>main</code> method <strong>has the first autorelease pool</strong> of the entire project.
So in our example, <code>newObj</code> goes in the main autorelease pool, which is drained when the current <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">Run Loop</a> terminates.<br/>
We are obviously supposing to be in the main thread, but however, in general, <strong>every thread has his main autorelease pool</strong>.</p>

<p>So now that we know the theory, the next question is: <strong>where does the autoreleased object found the pointer to the correct autorelease pool?</strong>
As the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html">Apple Documentation</a> says:</p>

<blockquote>
Each thread in a Cocoa application maintains its own stack of autorelease pool blocks.
</blockquote>


<p>and this is.  Simple as that!<br/>
So basically when the object call <code>autorelease</code>, it does something like:</p>

<pre><code class="objc">- (void)autorelease
{
    AutoreleasePool *pool = /* Take from the stack the most recently autorelease pool */
    [pool add:self];
}
</code></pre>

<p>Indeed, since autorelease&rsquo;s pool can be several and nested, <strong>there MUST be a stack</strong>.<br/>
This is of course an high level code to make it easier to understand, but the open source Apple&rsquo;s implementation of autorelease is <a href="http://opensource.apple.com/source/objc4/objc4-493.9/runtime/objc-arr.mm">here</a>.</p>

<p>The last thing to stress, regards the autorelease pool&rsquo;s container.<br/>
Indeed, <strong>what datastructure does an autorelease pool use to store objects to release?</strong><br/>
Let&rsquo;s try:</p>

<ul>
<li><code>NSMutableArray</code>: no, because it would retain the object calling <code>-addObject</code>. This would make the autorelease vain;</li>
<li><code>NSMutableDictionary</code>: no, for the same reason of the previous;</li>
<li><code>NSMutableSet</code>: no, for the same reason of the previous and because doesn&rsquo;t accept repeated object.</li>
</ul>


<p>So what does it use?<br/>
Easy: any data structure which <strong>doesn&rsquo;t retains the object</strong> and that <strong>accepts repeated objects</strong>, like for example <code>NSPointerArray</code> with <code>weak</code> objects references, <code>LinkedList</code>, etc.
<br />
<br /></p>

<h2>Conclusion</h2>

<p>I hope that this article has cleared every doubt about the <code>autorelease</code> method and the <strong>autorelease pool</strong>. Even if the management of an autorelease pool will be always a system&rsquo;s responsibility, it is very important to understand how it works.</p>

<p>Follow me on <a href="http://twitter.com/matteo_gobbi">Twitter</a>!</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
