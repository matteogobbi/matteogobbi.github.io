<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matteo Gobbi]]></title>
  <link href="http://matteogobbi.github.io/atom.xml" rel="self"/>
  <link href="http://matteogobbi.github.io/"/>
  <updated>2015-04-28T22:56:40+01:00</updated>
  <id>http://matteogobbi.github.io/</id>
  <author>
    <name><![CDATA[Matteo Gobbi]]></name>
    <email><![CDATA[job@matteogobbi.it]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Branching Model and CI Configuration @ Busuu]]></title>
    <link href="http://matteogobbi.github.io/blog/2015/04/27/branches-model-and-ci-configuration-at-busuu/"/>
    <updated>2015-04-27T22:40:55+01:00</updated>
    <id>http://matteogobbi.github.io/blog/2015/04/27/branches-model-and-ci-configuration-at-busuu</id>
    <content type="html"><![CDATA[<p>Any tech company which has a team of developers working on a project, needs to have a repository and to use a revision control system, as for instance <strong>Git</strong>.<br/>
Unfortunately, even if the platform/tool&rsquo;s choice is more or less reconducible every time to a small group of these latters, many companies and particularly many teams, still don&rsquo;t use a strong <strong>Branching Model</strong> and a powerful <strong>Continuos Integration configuration</strong>.<br/>
This article wants just to show how we sorted these important things in <a href="http://busuu.com/">busuu</a>, giving an idea of what we think is nicely organized.</p>

<!--more-->


<p><br/></p>

<h2>GitFlow as branching model</h2>

<p>Working in a project, always comes the time to pick a story from the board (possibly working on that without breaking the stable version of the project) and always comes the time to merge something in the main branch, testing, releasing, distributing, fixing a bug and so on.<br/>
All these operations may easily generate a problem or break something if they are not dealt carefully. What I think is foundamental to reach this goal, is to use a <strong>consistent branching model</strong>.<br/>
In <strong>busuu</strong>, we use <a href="http://github.com/">Github</a> as <strong>repository manager</strong>, <a href="https://www.atlassian.com/software/jira">JIRA</a> as <strong>issues and project tracker</strong>, <a href="http://git-scm.com/">Git</a> as <strong>revision control system</strong>, and we all together decided also to use <strong>GitFlow</strong> as branching model.<br/>
<br />
Probably you may have read in the past the article <a href="http://nvie.com/posts/a-successful-git-branching-model/">&ldquo;A successful Git branching model&rdquo;</a> of <a href="http://nvie.com/about/">Vincent Driessen</a>, talking exactly about <strong>GitFlow</strong>. If not, don&rsquo;t worry. I&rsquo;m gonna expose just below the same main image used in that article to explain how GitFlow works:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/1.png" width="700" alt="GitFlow" /></p>

<p>When I saw this image, I found it very explicative. Let&rsquo;s see it together:<br/>
<br />
Firstly we see two branches in bold: <strong><code>develop</code></strong> and <strong><code>master</code></strong>. These branches are the most important, and they will <strong>never be removed</strong> or renamed.<br/>
<br />
<strong><code>develop</code></strong> is the branch containing the project&rsquo;s version on which we are <strong>currently working on</strong>. This branch is in every point of the commits history <strong>deliverable</strong>. This means that it <strong>will never contains just a part of a feature</strong> or a broken piece of code, but it will instead <strong>ever contains completed features</strong> or fixes.<br/>
<br />
<strong><code>master</code></strong> is the branch containing the project&rsquo;s version which is <strong>currently in production</strong> (i.e. AppStore, Google Play, etc.). Anytime there is a new merge on master, a new tag (normally corrisponding to the new version of the app) is created, and a new version of the app goes in production.<br/>
<br />
Cool, the principal branches have been quickly explained.<br/>
What is clear from the picture is that there are other branches around these two, and they are what I call &ldquo;<strong>temporary</strong> branches&rdquo;. I&rsquo;m gonna explain what these are, showing step by step how <strong>GitFlow</strong> works and how should we apply it:
<br />
<br /></p>

<h3>STEP 1</h3>

<h4>Initial phase</h4>

<p>In the initial phase of a project we should just have the main branches just explained above: <strong><code>develop</code></strong> and <strong><code>master</code></strong>.<br/>
<br /></p>

<h3>STEP 2</h3>

<h4>First feature</h4>

<p>Now is the time to choose a story from our issue/project tracker (i.e. JIRA) and working on that. Let&rsquo;s say that we choose the story <code>IOS-941</code>, bringing this from the <code>To Do</code> to the <code>In Progress</code> column.<br/>
What we should do now, would be to <strong>create a separated branch</strong>.<br/>
<br/>
Indeed, working on <code>develop</code> is not a good practice, especially if we are working with a team. The risk to have conflicts breaking the project could be really high and will be also hard to keep cleaned the project&rsquo;s history. Also remember that, for definition <strong><code>develop</code></strong> should be in any point deliverable. This means that a branch should be merged on <code>develop</code> just when the related feauture is completed and it is ready to be shipped. Instead, pushing everything there would imply to have in many points of the branch, small parts of different stories, all together at the same time. In other words: <strong>an incontrollable big mess</strong>.<br/>
<br/>
So as I said above, we have to create another brach starting from <strong><code>develop</code></strong>. The new banch should be created in the subfolder <code>feature</code> as we are gonna implementing exactly a new feature: <code>feature/IOS-941</code>.<br/>
<br /></p>

<h3>STEP 3</h3>

<h4>The feature is complete</h4>

<p>After having worked on our feature, it will probably comes the time in which we finished it and we would like to close and merging it into the <strong><code>develop</code></strong> branch.<br/>
That&rsquo;s the time to ask a <strong>Pull Request</strong>.
<br /><br/>
This latter, is a request made to the dev team, in order to review and eventually approve our code, merging it on <strong><code>develop</code></strong>.
The process we follow in <strong>busuu</strong> in this situation after to have made the pull request, is to pick up the story in JIRA, moving it in the <code>Review</code> column. When another team&rsquo;s developer notes a story in review, he should have a look to the code being sure that everything is ok, and then he should moves the story in the <code>Testing</code> column.<br/>
Now is the time of the <strong>QA</strong>. The <strong>QA</strong>, often called as <strong>Tester</strong>, should test the new feature, moving the story in the column <code>Done</code> if everything is ok, or otherwise back <code>In Progress</code> reporting the issue.<br/>
<br />
Supposing that our feature has been approved even by the QA, anyone of the dev team could now <strong>merge the pull request</strong> in <strong><code>develop</code></strong>.<br/>
<br /></p>

<h3>STEP 4</h3>

<h4>Prepare a release</h4>

<p>When all the features we want to be in the next version of the app are completed and merged in <strong><code>develop</code></strong>, it is the time to create a <strong>release</strong>. So what we should do is to create a branch from <strong><code>develop</code></strong> in the subfolder <code>release</code> ideally naming the branch with something related to the version number, like for instance <code>release/v1.0</code>.<br/>
<br />
What we have now in this <code>release</code> branch, it is exactly what should be delivered in the market, but of course we need still to test it again and again before to be sure that effectly we can safely making it available to everyone. Normally this is what the QA team does, but in <strong>busuu</strong> we also distribute the app internally for betatesting.<br/>
Any bug found should be fixed directly in this branch, and then merged in <strong><code>develop</code></strong> to keep the working branch updated and stable.<br/>
Please note that <strong>only bug fixes</strong> are allowed in this branch, and <strong>only <code>develop</code></strong> should be updated if this branch gets bug fixing commits.<br/>
<br /></p>

<h3>STEP 5</h3>

<h4>Let&rsquo;s go in production!</h4>

<p>Once we properly tested and fixed eventually bugs on the <code>release</code> branch, it&rsquo;s come the time to submit the app in the store.<br/>
What we should do now, would be to merge our <code>release/v1.0</code> in <strong><code>master</code></strong>, therefore finally closing this <code>release</code> branch.<br/>
Everytime something is merged on <strong><code>master</code></strong>, <strong>a new tag related to the version of the app is created</strong>. This makes it easy also navigate in the version history in the repository.
<br />
Let me say also that everytime a version goes in <strong><code>master</code></strong>, we can finally delete <code>feature/*</code> and <code>release/*</code> branches related to this, keeping our repository clean and tidy.<br/>
<br /></p>

<h3>STEP 6 - Optional ;)</h3>

<h4>Bug: please fix immediately!</h4>

<p>Yes, it may happen.<br/>
Just suppose that while our app is in production, a serious bug is tracked on Crashlitics (or similar). What we want to do, is to fix it immediately and to distribute another version of our app. This is what is commonly called an <strong>hotfix</strong>.<br/>
In the initial image, you see an example of <code>hotfix</code>. As you can note, a branch is created directly from <strong><code>master</code></strong>, and after having fixed the issue, the branch is merged back, again, directly on <strong><code>master</code></strong> but also on <strong><code>develop</code></strong>, to continue to keep it safe. As we said in the previous step, merging on <strong><code>master</code></strong> a new tag is created and a new version of the app gets submitted to Apple.
The branch should be created under the subfolder <code>hotfix</code>, i.e. <code>hotfix/IOS-950</code>.<br/>
<br />
<br />
This is &ldquo;briefly&rdquo; how GitFlow works.<br/>
<br />
<br /></p>

<h2>SourceTree as GIT client</h2>

<p>Everyone has probably used in life <code>git</code> from a terminal/shell, but what my collegues and I (but also some other friends of mine) experienced, is that a <code>git</code> client could be really interesting to use as it can result more immediate and easy to use. What we are gonna discuss in this paragraph is how to setup and how to use the client Atlassian <strong>SourceTree</strong>, respecting the <strong>GitFlow</strong> approach.<br/>
<br/>
Let&rsquo;s go fast and easy:</p>

<p>The initial situation we should see in <code>SourceTree</code> after having branched <strong><code>develop</code></strong> from <strong><code>master</code></strong> in our repository, should be this:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/2.png" width="150" alt="SourceTree" /></p>

<p>On the top bar, close to the end, we can note the button <code>GitFlow</code>:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/3.png" width="700" alt="SourceTree" /></p>

<p>Pressing this button we&rsquo;ll access to the <code>GitFlow</code> configuration form:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/4.png" width="300" alt="SourceTree" /></p>

<p>here we could customize the branches&#8217; names and folders, or just keep the dafault configuration (strongly suggested). <code>SourceTree</code> will use these information to create feature, hotfix and release branches, managing them properly. Clicking <strong>OK</strong>, <code>SourceTree</code> will be ready to use <code>GitFlow</code>.<br/>
<br />
Now it is the moment to create the first feature; so let&rsquo;s take again for instance the feature <code>IOS-941</code>. The only thing we need to do, it is to click again on the <code>GitFlow</code> button and start a new feature choosing a name for our new branch:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/5.png" width="300" alt="SourceTree" /></p>

<p>We can do the same also with an <strong>hotfix</strong>, let&rsquo;s say <code>IOS-950</code>.<br/>
So the branches situation in the left panel would looks like this:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/6.png" width="150" alt="SourceTree" /></p>

<p>As you see, <code>SourceTree</code> has created for us the right subfolders.<br/>
Well, let&rsquo;s suppose to have fixed our bug and of course we want to release a new version. We need just to click again on the <code>GitFlow</code> button, and we&rsquo;ll see the following window:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/7.png" width="300" alt="SourceTree" /></p>

<p>Clicking on the <strong>Finish Current</strong> button, <code>SourceTree</code> will be ready to merge automatically our <code>hotfix</code> branch in <strong><code>develop</code></strong> and in <strong><code>master</code></strong>, offering us the chance to choose a <code>Tag</code> which will identify the new app version:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/8.png" width="300" alt="SourceTree" /></p>

<p>Simple as that!<br/>
<br />
Now let&rsquo;s see how it works when we have to create a new <code>release</code>.<br/>
The process is pretty the same of the previous ones but instead of starting a new <code>feature</code> or a new <code>hotfix</code>, we will start with a new <code>release</code>. After having choosen a name (i.e. <code>v1.0</code>), the result on the left panel will be this:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/9.png" width="150" alt="SourceTree" /></p>

<p>As we said in the previous paragraph, what we have to do now is to test our new release, normally by QAs and Beta Testers. <strong>Any bug will be solved directly in this branch</strong> and merged back in <strong><code>develop</code></strong> to keep it updated.<br/>
<br />
Once we&rsquo;ll be ready to publish our version, we&rsquo;ll have to click again on the <code>GitFlow</code> button and &ldquo;finishing&rdquo; the release branch:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/10.png" width="300" alt="SourceTree" /></p>

<p>As for the <code>hotfix</code>, this <code>release</code> will be merged in <strong><code>develop</code></strong> and in <strong><code>master</code></strong>, offering to us the chance to choose a <code>Tag</code> which will identify the new app version:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/11.png" width="300" alt="SourceTree" /></p>

<p><br/></p>

<h2>CI configuration in Jenkins</h2>

<p>As you know, as Software Engineer we have to write code, but also to build, test, track and distribute our software. Any of us knows how it is boring doing manually this things, as well as how long it takes. For these and other reasons is really recommended for any company to use a <strong>Continuos Integration Server</strong>.<br/>
Today there are many web platform offering this service like, one of the most famous, <strong>Travis</strong>. But what we ended up to do in <strong>busuu</strong> is to configure our CI Server in local, installing <a href="https://jenkins-ci.org/">Jenkins</a> (a really famous CI platform) on a server in our office.<br/>
But I don&rsquo;t want boring you guys explaining how to configure <strong>Jenkins</strong> also because it is sufficient read the documentation and play with it. What instead I would like to share are the <strong>jobs we decided to setup on Jenkins</strong> in order to have a strong automation process:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/gitflow/12.jpg" width="800" alt="SourceTree" /></p>

<p>This image is hugly but real 😁. Those are the jobs we decided to setup in Jenkins after a 1 hour meeting.<br/>
First of all we identified all the important tasks we would have had need. Let&rsquo;s explain them together:</p>

<ul>
<li><strong>build</strong>(+packaging): compiling all of the source files to object files, linking these together into an executable (i.e. in iOS <code>.app</code>);</li>
<li><strong>unit tests</strong>: automated pieces of code used to checks assumptions about the behaviors of our code;</li>
<li><strong>tests report</strong>: unit tests results;</li>
<li><strong>tests coverage</strong>: how much the code is covered by tests;</li>
<li><strong>functional tests</strong>: testing the software&rsquo;s functionalities (as a human) on a simulator or on a real device;</li>
<li><strong>beta distribution</strong>: distribute the app internally for beta testing (we use <strong>Crashlitics</strong>);</li>
<li><strong>store artificat</strong>: an artificat can be used to represent data created as a side-effect of running a Jenkins build;</li>
<li><strong>archive</strong>: it generates an archive (i.e. <code>.ipa</code> for <strong>iOS</strong> / <code>.apk</code> for <strong>Android</strong>) ready to be sent in the market;</li>
<li><strong>assembling</strong>: in Android it roughly corresponds to build, package and archive.</li>
</ul>


<p>From these we created all the necessaries jobs I&rsquo;m gonna list just below. Just to be clear: in the image you could see some job in more as there could be some difference between iOS and Android:</p>

<h3>Job 1</h3>

<h4>Weekend internal distribution</h4>

<p><u>Branch</u>: <code>develop</code>;<br/>
<u>Configuration</u>: <strong>Ad Hoc</strong>;<br/>
<u>Tasks</u>: <strong>build</strong> > <strong>unit tests</strong> > <strong>tests report</strong> > <strong>deploy</strong> > <strong>beta distribution</strong> (to devs, QA and to the whole company);<br/>
<u>When</u>: <strong>friday afternoon</strong>.<br/>
<br /></p>

<h3>Job 2</h3>

<h4>Debug for test coverage</h4>

<p><u>Branch</u>: <code>develop</code>;<br/>
<u>Configuration</u>: <strong>Debug</strong>;<br/>
<u>Tasks</u>: <strong>build</strong> > <strong>unit tests</strong> > <strong>tests report</strong> > <strong>test coverage</strong>;<br/>
<u>When</u>: <strong>on commit</strong>.<br/>
<br /></p>

<h3>Job 3</h3>

<h4>Internal distribution for devs and QA</h4>

<p><u>Branch</u>: <code>develop</code>;<br/>
<u>Configuration</u>: <strong>Ad Hoc</strong>;<br/>
<u>Tasks</u>: <strong>build</strong> > <strong>unit tests</strong> > <strong>tests report</strong> > <strong>archive</strong> > <strong>beta distribution</strong> (to devs and QA);<br/>
<u>When</u>: <strong>on commit</strong>.<br/>
<br /></p>

<h3>Job 4</h3>

<h4>Feature branches - Internal distribution for devs and QA</h4>

<p><u>Branch</u>: <code>feature/*</code>;<br/>
<u>Configuration</u>: <strong>Ad Hoc</strong>;<br/>
<u>Tasks</u>: <strong>build</strong> > <strong>unit tests</strong> > <strong>tests report</strong> > <strong>archive</strong> > <strong>beta distribution</strong> (to devs and QA);<br/>
<u>When</u>: <strong>manual</strong> (when needed to test).
<br /></p>

<h3>Job 5</h3>

<h4>Release - Internal distribution</h4>

<p><u>Branch</u>: <code>release/*</code>;<br/>
<u>Configuration</u>: <strong>Ad Hoc</strong>;<br/>
<u>Tasks</u>: <strong>build</strong> > <strong>unit tests</strong> > <strong>tests report</strong> > <strong>functional tests</strong> > <strong>archive</strong> > <strong>store artificat</strong> > <strong>beta distribution</strong> (to devs, QA and to the whole company);<br/>
<u>When</u>: <strong>on commit</strong>.<br/>
<br /></p>

<h3>Job 6</h3>

<h4>Hotfix - Internal distribution</h4>

<p><u>Branch</u>: <code>hotfix/*</code>;<br/>
<u>Configuration</u>: <strong>Ad Hoc</strong>;<br/>
<u>Tasks</u>: <strong>build</strong> > <strong>unit tests</strong> > <strong>tests report</strong> > <strong>functional tests</strong> > <strong>archive</strong> > <strong>store artificat</strong> > <strong>beta distribution</strong> (to devs, QA and to the whole company);<br/>
<u>When</u>: <strong>on commit</strong>.<br/>
<br /></p>

<h3>Job 7</h3>

<h4>Released app internal distribution</h4>

<p><u>Branch</u>: <code>master</code>;<br/>
<u>Configuration</u>: <strong>Ad Hoc</strong>;<br/>
<u>Tasks</u>: <strong>build</strong> > <strong>unit tests</strong> > <strong>tests report</strong> > <strong>functional tests</strong> > <strong>archive</strong> > <strong>store artificat</strong> > <strong>beta distribution</strong> (to devs, QA and to the whole company);<br/>
<u>When</u>: <strong>on commit</strong>.</p>

<p><br/></p>

<h2>Conclusion</h2>

<p>The more processes will be automated and conistent, the more you and your team will save time having your life easier.<br/>
<br />
Thanks to <a href="https://twitter.com/chris_cgp">Christian Garcia</a> for the review of this article.<br/>
<br />
<strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!<br/>
<br />
Enjoy ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a TableView(Controller) Architecture]]></title>
    <link href="http://matteogobbi.github.io/blog/2015/03/22/anatomy-of-a-tableview-controller-architecture/"/>
    <updated>2015-03-22T02:09:15+00:00</updated>
    <id>http://matteogobbi.github.io/blog/2015/03/22/anatomy-of-a-tableview-controller-architecture</id>
    <content type="html"><![CDATA[<p><code>UITableView</code>s are part of our projects since the very beginning of the iOS SDK. But even if they are kind of our &ldquo;old friends&rdquo;, many of us still don&rsquo;t use them properly. No, wait. I know you use them to &ldquo;show cells&rdquo;, of course. For &ldquo;properly&rdquo; I mean: in a <strong>well architected way</strong>.</p>

<!--more-->


<p><br /></p>

<h2>The most diffused &ldquo;wrong&rdquo; approach</h2>

<p>When developers need to use a <code>UITableView</code>, they put it normally in a <code>UIViewController</code>, or <code>UITableViewController</code>. At this point the first thing they do in the <strong>ViewController</strong> is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">datasource</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>setting the class conform to these two protocols.</p>

<p><strong>Not</strong> really a big deal.<br />
Let’s discuss some better ways to structure our code.</p>

<p>First of all we have to understand the difference between <code>UITableViewDelegate</code> and <code>UITableViewDataSource</code> or in a more general sense, the difference between <strong>delegate</strong> and <strong>datasource</strong>;
Secondly we should reflect about what a <strong>ViewController</strong> should take care of.
<br />
<br /></p>

<h2>Understanding the roles</h2>

<p>In order to have a clear vision of how to build a strong architecture, we  first have to understand what is a delegate, and what is a datasource.<br/>
<br />
<strong>Delegation</strong> is a pattern used to send a message from an object (the delegating), to another object (the delegate), and as Apple says:</p>

<blockquote>
The message informs the delegate of an event that the delegating object is about to handle or has just handled.
</blockquote>


<p>So in the <code>UITableView</code>&rsquo;s case, its delegate is called when an user taps a cell, or adds/deletes/moves it, etc.<br/>
<br />
The <strong>datasource</strong> is the object responsible for managing the content you are presenting for example in a table or collection view. His main task is to <strong>return the data which will be displayed by the table view</strong>.<br/>
<br />
So we can imagine the table view asking to his datasource questions like:</p>

<ul>
<li>How many sections shall I have?</li>
<li>For a given section, how many rows shall I display for it?</li>
<li>For a given section, what title shall I display for it?</li>
</ul>


<p>and so on&hellip;<br/>
<br />
Now the question (and also one of the main point of this text) is:<br/>
<strong>should the ViewController be responsible of all this being both, tableView&rsquo;s delegate and datasource as well as, I repeat, the <u>view controller</u></strong>?
<br /><br/>
What the view controller should effectly take care of?<br/>
<br />
Since the initial Apple tutorials back to 2008, developers took the habit to put everything into the view controller, bringing the whole tech community to joke about this buckling the famous pattern and acronym <strong>MVC</strong>, the meaning of &ldquo;<strong>Massive</strong> View Controller&rdquo; instead of &ldquo;Model View Controller&rdquo;.<br/>
So the answer to the previous question as maybe you can imagine is a most likely <strong>NO</strong>.<br/>
<br />
The <strong>ViewController</strong>, should indeed be responsible to interact with other entities as for example the network layer or the data model, providing then the data to the view (or to the ViewModel as in the MVVM design pattern). Moreover, it should handle the final actions performed from the user on the view.<br/>
<br />
In the <code>UITableView</code>&rsquo;s case, is the <strong>TableView</strong>&rsquo;s <strong>delegate</strong> to handle the actions performed on the table, following for example this process:</p>

<ol>
<li>1 - An user taps a cell;</li>
<li>2 - The table view delegate handles the tap;</li>
<li>3 - The delegate does something and if needed it will call the final action in the view controller.</li>
</ol>


<p>Don&rsquo;t worry about the third point, we&rsquo;ll see how to sort it out shortly.
<br />
<br /></p>

<h2>Building the architecture</h2>

<p>After this (too) long introduction, it&rsquo;s time to discover the core of this article: <strong>how to build an efficient architecture</strong>.<br/>
<br />
The standard architecture we have when we create a <code>UIViewController</code> with inside a <code>UITableView</code>, is basically the following:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/anatomy-architecture/1.png" alt="Basic" /></p>

<p>Well, a simple view controller with his view, and an <code>IBOutlet</code> to the <code>UITableView</code> (or a reference in code, but let&rsquo;s take is simple).<br/>
The next step, would be to understand how and where we want to istantiate the <strong>delegate</strong> and the <strong>datasource</strong>. This is absolutely the main point of our architecture, as we want a <strong>net separation</strong> between these objects, so that everyone has its own responsabilities. Therefore what we need is a <strong>custom delegate</strong>, and a <strong>custom datasource</strong>. These will be respectively conform to <code>UITableViewDelegate</code> and <code>UITableViewDatasource</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MGTableViewDelegate</span> : <span class="bp">NSObject</span> <span class="o">&lt;</span><span class="bp">UITableViewDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MGTableViewDatasource</span> : <span class="bp">NSObject</span> <span class="o">&lt;</span><span class="bp">UITableViewDataSource</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But who should instantiate and own these 2?</p>

<p>The answer may vary, but having them into the <strong>ViewController</strong> is totally acceptable and we are going for taking this choice.</p>

<p>As controller of the view and principal &ldquo;manager&rdquo;, it will own and set them as delegate and datasource of our <code>UITableView</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MGTableViewDelegate</span> <span class="o">*</span><span class="n">myDelegate</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGTableViewDelegate</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">MGTableViewDatasource</span> <span class="o">*</span><span class="n">myDatasource</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGTableViewDatasource</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">myDelegate</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">datasource</span> <span class="o">=</span> <span class="n">myDatasource</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Therefore, at this point our architecture should look like this:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/anatomy-architecture/2.png" alt="Delegate and Datasource" /></p>

<p>Let&rsquo;s also suppose to have a custom <strong>headerView</strong> for the <code>UITableView</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MGTableHeaderView</span> : <span class="bp">UIView</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>as well as some cell to display:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/anatomy-architecture/3.png" alt="TableView Header and Cells" /></p>

<p>Good.<br/>
The architecture begins to take shape. We have almost all the pieces.<br/>
We know that the delegate will take care of the tableView&rsquo;s events, but <strong>how will the datasource generate the data for the tableView</strong>?</p>

<p>The datasource has to generate the necessary data using the available information. Sharing this information, is <strong>ViewController</strong>&rsquo;s. Indeed, it could pass the reference to this data at the moment of the datasource initialization.<br/>
So let&rsquo;s go back some lines and let&rsquo;s refactor our code, supposing that the data we want to pass to the datasource is a <strong>user</strong> data object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MGTableViewDelegate</span> <span class="o">*</span><span class="n">myDelegate</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGTableViewDelegate</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">MGTableViewDatasource</span> <span class="o">*</span><span class="n">myDatasource</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGTableViewDatasource</span> <span class="nl">datasourceWithUser</span><span class="p">:</span><span class="n">user</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">myDelegate</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">datasource</span> <span class="o">=</span> <span class="n">myDatasource</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool. So let&rsquo;s have a look at the final architecture:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/anatomy-architecture/4.png" alt="TableView Header and Cells" /></p>

<p>Now the datasource can use this data to generate and return cells for the <strong>TableView</strong> throught the method <code>- tableView:cellForRowAtIndexPath:</code> called from the latter.</p>

<p>The user DTO object contains common info like:</p>

<ul>
<li>name;</li>
<li>surname;</li>
<li>gender;</li>
<li>birthday;</li>
<li>address;</li>
</ul>


<p>and so on.<br/>
As we said above, the responsibility of the datasource is to manipulate these information displaying them into the appropriate cells.</p>

<p><strong>But which is the best approach to achieve this result?</strong></p>

<p>In one of my previous articles, I wrote about <a href="http://matteogobbi.github.io/blog/2014/10/31/interaction-object/">Interaction Objects</a>.<br/>
An <strong>InteractionObject</strong> is a component which can store all the information needed to configure a cell, i.e.:</p>

<ul>
<li>image;</li>
<li>title;</li>
<li>value;</li>
<li>target;</li>
<li>selector;<br/>
..etc.</li>
</ul>


<p>An example of <strong>InteractionObject</strong>, is something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objGender</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span>
</span><span class='line'>                                <span class="nl">initWithOption</span><span class="p">:</span><span class="s">@&quot;Gender&quot;</span>
</span><span class='line'>                                <span class="nl">value</span><span class="p">:</span><span class="n">_user</span><span class="p">.</span><span class="n">gender</span>
</span><span class='line'>                                <span class="nl">imageURLString</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>                                <span class="nl">editable</span><span class="p">:</span><span class="nb">NO</span>
</span><span class='line'>                                <span class="nl">target</span><span class="p">:</span><span class="n">_viewController</span>
</span><span class='line'>                                <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">mg_changeGender</span><span class="p">:)];</span>
</span></code></pre></td></tr></table></div></figure>


<p>(as you see, the target is a <strong>ViewController</strong>, which in this case could be passed for example during the datasource&rsquo;s initialization, using a <code>weak</code> reference).</p>

<p>Once that the datasource has configured these objects, it will store them into an hierarchy of arrays, ready to be showed in the right <code>indexPath</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//InteractionObject for rows in the section profile</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">profileSection</span> <span class="o">=</span> <span class="l">@[</span><span class="n">objCountry</span><span class="p">,</span> <span class="n">objGender</span><span class="p">,</span> <span class="n">objCity</span><span class="p">,</span> <span class="n">objOccupation</span><span class="p">,</span> <span class="n">objAbout</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//InteractionObject for rows in the section logout</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">logoutSection</span> <span class="o">=</span> <span class="l">@[</span><span class="n">objLogout</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Final array of section</span>
</span><span class='line'><span class="n">_arrayDatasource</span> <span class="o">=</span> <span class="l">@[</span><span class="n">profileSection</span><span class="p">,</span> <span class="n">logoutSection</span><span class="l">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the image rapresenting the final architecture:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/anatomy-architecture/5.png" alt="Interaction Objects inside" /></p>

<p>Finally, as we want to be able to update our <strong>InteractionObject</strong>s as well as reloading the <strong>headerView</strong> and <strong>cells</strong>, we have to override the method <code>- reloadData</code> of the <code>UITableView</code>, subclassing the latter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Implementation file of the MGTableView&#39;s class inherited from UITableView</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MGTableViewDatasource</span> <span class="o">*</span><span class="n">datasource</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">dataSource</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Update datasource</span>
</span><span class='line'>    <span class="p">[</span><span class="n">datasource</span> <span class="n">updateData</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Get the interactionObject for the headerView</span>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objHeader</span> <span class="o">=</span> <span class="p">[</span><span class="n">datasource</span> <span class="n">headerInteractionObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Update the headerView</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">tableHeaderView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Do init</span>
</span><span class='line'>        <span class="n">MGTableViewHeader</span> <span class="o">*</span><span class="n">headerView</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGTableViewHeader</span> <span class="n">headerViewFromNib</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">tableHeaderView</span> <span class="o">=</span> <span class="n">headerView</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[(</span><span class="n">MGTableViewHeader</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">tableHeaderView</span> <span class="nl">configureWithHeaderInteractionObject</span><span class="p">:</span><span class="n">objHeader</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this method is called, firstly is called <code>[datasoure updateData]</code>, which reading from the data object (in our previous example, the user), regenerate all the <strong>InteractionObjects</strong>, included the one for the <strong>headerView</strong>.</p>

<p>Well, let&rsquo;s recap a little bit:</p>

<ol>
<li>1 - the <strong>ViewController</strong> creates the <code>UITableView</code>&rsquo;s <strong>delegate</strong> and <strong>datasource</strong> as separated components;</li>
<li>2 - the method <code>- reloadData</code> is called on the <strong>TableView</strong>;</li>
<li>3 - from the previous point, the <strong>datasource</strong> gets updated creating all the needed <strong>InteractionObject</strong>s by the information contained in the <strong>DataObject</strong>;</li>
<li>4 - calling <code>[super reloadData]</code> the method <code>- tableView:cellForRowAtIndexPath:</code> gets invoked from the <strong>TableView</strong>, and the cells are configured passing to anyone the corresponding <strong>InteractionObject</strong>;</li>
<li>5 - the <strong>headerView</strong> is updated.</li>
</ol>


<p>The last thing I would like to stress, is the simplicity of the method which should handle a tap on a cell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MGTableViewDatasource</span> <span class="o">*</span><span class="n">datasource</span> <span class="o">=</span>
</span><span class='line'>      <span class="p">(</span><span class="n">MGTableViewDatasource</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span><span class="p">.</span><span class="n">dataSource</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">interactionObj</span> <span class="o">=</span>
</span><span class='line'>      <span class="p">[</span><span class="n">datasource</span> <span class="nl">cellInteractionObjectAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Execute target/selector</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">interactionObj</span><span class="p">.</span><span class="n">target</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">interactionObj</span><span class="p">.</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">interactionObj</span><span class="p">.</span><span class="n">target</span> <span class="nl">performSelector</span><span class="p">:</span><span class="n">interactionObj</span><span class="p">.</span><span class="n">selector</span>
</span><span class='line'>                                  <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">afterDelay</span><span class="p">:</span><span class="mf">0.f</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">tableView</span> <span class="nl">deselectRowAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>which the only thing it does, is getting the corresponding <strong>InteractionObject</strong> for that <code>indexPath</code>,  reading the contained information to perform then a <strong>selector</strong> on a <strong>target</strong>.</p>

<p><br />
<br /></p>

<h2>Conclusion</h2>

<p>Following the architecture explained in this article, your project folder hierarchy should look something like this:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/anatomy-architecture/project.png" height="500" alt="Project hierachy" /></p>

<p>The best thing of this approach, is the architecture really scalable and maintanable. Even if after some months you&rsquo;ll need to add another cell in one of the TableView&rsquo;s section, the only thing you&rsquo;ll do will be creating another <strong>InteractionObject</strong>, letting <strong>every component</strong> doing its job and <strong>without touching any kind of method</strong>.<br/>
<br />
Thanks to <a href="http://twitter.com/albertodebo">Alberto De Bortoli</a> for the review of this article.</p>

<p><strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!</p>

<p>Enjoy ;)</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending Methods in a Category by Method Swizzling]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/12/15/extending-methods-in-a-category-by-method-swizzling/"/>
    <updated>2014-12-15T21:57:25+00:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/12/15/extending-methods-in-a-category-by-method-swizzling</id>
    <content type="html"><![CDATA[<p>Overriding a method in a category <strong>is NOT possible</strong>.</p>

<p>Probably is happened to you too to being writing a category and at a certain point exclaiming &ldquo;<strong>F**K! It&rsquo;s a category!</strong>&rdquo;.
Yes, and probably was because you accidentally tried to override a method without remembering that effectively, you was writing a category.</p>

<p>In the largest percentage of situations, when you need to <strong>override a method</strong>, you want to write a <strong>subclass</strong>; when instead you want to <strong>write a category</strong> for a class, it is because you probably need to have some <strong>new methods</strong> or <strong>properties</strong> you would like every subclass of that class will can to use.</p>

<p>There is only another situation in front of which you could be confused, and this is when you are in both the previous cases, <strong>together</strong>.</p>

<!--more-->


<p><br/></p>

<h2>The problem</h2>

<p>Let&rsquo;s suppose you want to add some generic code in <code>-layoutSubviews</code>. The first thing which comes in your mind is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Your extra code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great.</p>

<p>Wait..let&rsquo;s suppose also you would like every subclass of <code>UIView</code> would implements an <strong>extra code</strong>, like for instance logging something or checking a property before do something else.<br/>
Make this by subclassing would be time-consuming and would implies code repetition as you should create a subclass and override the <code>-layoutSubviews</code> method for <code>UIView</code>, <code>UIImageView</code>, <code>UIControl</code>, <code>UILabel</code> and so on, as well as set these subclasses for any new and old class&hellip;</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/swizzling/1.jpg" height="300" alt="..say again?" /></p>

<p>Exactly, it is <strong>unthinkable</strong>.</p>

<p>When we need to add functionalities or properties to a class, we normally write a single <strong>Category</strong> for the higher superclass we need to extend. In this case that class would be <code>UIView</code>. But, we still have a problem: we <strong>don&rsquo;t want to add a new method</strong>, we want to <strong>extend an existing method</strong>.<br/>
We know that this is not possible, as a category is a class extension, and implementing an existing method like <code>-layoutSubviews</code>, would results in a method repetition. As figurative and easy example think just to something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//UIView standard code...</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//..default UIView code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...UIView standard code</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//My layoutSubviews method</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//..my code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what can we do?<br/>
<br/></p>

<h2>Playing around the problem with Method Swizzling</h2>

<p><strong>Method Swizzling</strong> is a technique with which, roughly speaking, you can swipe two methods making <strong>the selector of the first method calls the second method and vice-versa</strong>.</p>

<p>The idea is to <strong>create a new method</strong> and <strong>swap his implementation with the <code>-layoutSubviews</code> one</strong>. Therefore, calling <code>-layoutSubviews</code>, will be effectively executed the new method with our new code, and in the new method, we will also call his selector, which instead will executes the <code>-layoutSubviews</code> original method.</p>

<p>Calm down, I know, it&rsquo;s not easy to explain and to understand with these few lines above. So I created a couple of diagrams to have in mind a visual image of the situation:</p>

<h4>The normal condition we have is the following:</h4>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/swizzling/2.png" height="400" alt="normal condition" /></p>

<h4>The condition we want to pull out, is instead this:</h4>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/swizzling/3.png" height="400" alt="normal condition" /></p>

<p>Being <strong>not possible insert extra code</strong> in the <code>-layoutSubviews</code> method, in a category, we have to <strong>redirect the flow through our custom method</strong>, in order to manipulate it.</p>

<p>Now, it&rsquo;s the time to have a look at the explained code step by step.</p>

<p>Let&rsquo;s start by saying that Apple offers a set of <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html">C functions</a>, useful to manipulate <strong>properties</strong>, <strong>ivars</strong>, <strong>classes</strong>, <strong>methods</strong> and so on, at <strong>runtime</strong>. We are gonna see some of these in order to sort our situation.<br/>
<br/></p>

<h3>STEP 1</h3>

<h4>Add the new method</h4>

<p>The firs thing to do, is to add a new (empty for now) method to our category. This method, will be the one containing our <strong>code extension</strong> or our part of code we want to be executed when <code>-layoutSubviews</code> is called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="bp">UIView</span> <span class="nl">(MG_layoutSubviews)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br/></p>

<h3>STEP 2</h3>

<h4>Write the swizzling method - First part</h4>

<p>The method containing the <strong>swizzling</strong> code, needs to be a class method. We will see the reason later.
We must to remeber that we are doing this to have an extended <code>-layoutSubviews</code> default implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//..category code</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_extendsLayoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//PART 1</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">thisClass</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//layoutSubviews selector, method, implementation</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">layoutSubviewsSEL</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">layoutSubviews</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">layoutSubviewsMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">layoutSubviewsSEL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">layoutSubviewsIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//mg_layoutSubviews selector, method, implementation</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">mg_layoutSubviewsSEL</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">mg_layoutSubviews</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">mg_layoutSubviewsMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">mg_layoutSubviewsSEL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">mg_layoutSubviewsIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">mg_layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//....</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..category code</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>class_getInstanceMethod</code> return the method which corresponds to the <strong>implementation of the selector and the class</strong> specified, or <code>NULL</code> if the specified class or its superclasses do not contain an instance method with the specified selector.</p>

<p><code>method_getImplementation</code> return <strong>a function pointer of type <code>IMP</code>.</strong></p>

<p>It is important to underline that each class has a <strong>dispatch table</strong>, and as <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html">Apple says</a>:</p>

<blockquote>
This table has entries that associate method selectors with the class-specific addresses of the methods they identify. 
</blockquote>


<p>So basically, <code>Method</code> is the glue between <code>SEL</code> and <code>IMP</code>, and at this point we have completely access to these information.</p>

<p><br/></p>

<h3>STEP 3</h3>

<h4>Write the swizzling method - Second part</h4>

<p>Now, we need to exchange the two implementations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//..category code</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_extendsLayoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//PART 1</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">thisClass</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//layoutSubviews selector, method, implementation</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">layoutSubviewsSEL</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">layoutSubviews</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">layoutSubviewsMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">layoutSubviewsSEL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">layoutSubviewsIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//mg_layoutSubviews selector, method, implementation</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">mg_layoutSubviewsSEL</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">mg_layoutSubviews</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">mg_layoutSubviewsMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">mg_layoutSubviewsSEL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">mg_layoutSubviewsIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">mg_layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//PART 2</span>
</span><span class='line'>    <span class="c1">//Try to add the method layoutSubviews with the new implementation (if already exists it&#39;ll return NO)</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">wasMethodAdded</span> <span class="o">=</span> <span class="n">class_addMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">layoutSubviewsSEL</span><span class="p">,</span> <span class="n">mg_layoutSubviewsIMP</span><span class="p">,</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">mg_layoutSubviewsMethod</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">wasMethodAdded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Just set the new selector points to the original layoutSubviews method</span>
</span><span class='line'>        <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">mg_layoutSubviewsSEL</span><span class="p">,</span> <span class="n">layoutSubviewsIMP</span><span class="p">,</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">layoutSubviewsMethod</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">layoutSubviewsMethod</span><span class="p">,</span> <span class="n">mg_layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..category code</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s happening in this code it is not really hard as could to seem.<br/>
The first thing to do is to <strong>try to add the method</strong> <code>-layoutSubviews</code>. In fact, also if this method is in the default implementation of <code>UIView</code>, it <strong>could not be implemented in the subclass</strong> of <code>UIView</code> which the developer is gonna write. It means, that <strong>could not exists an associated implementation for that subclass</strong>, but just for the superclass.</p>

<p>Using the function <code>BOOL class_addMethod ( Class cls, SEL name, IMP imp, const char *types )</code>, we can add in a <code>Class</code> a <strong>method associated to an implementation and called by a selector</strong>.
Therefore, if the method will results to be not implemented, the returned var will be <code>YES</code>; if instead there will be an error due for example the fact just explained above, the resulted var will be equals to <code>NO</code>.</p>

<p>In this code, we are adding a method called by the <code>-layoutSubviews</code> selector, but with the implementation of our new <code>-mg_layoutSubviews</code> method. The last parameter is an array of characters that describe the types of the arguments to the method.<br/>
Please note that <code>thisClass</code> is equals to <code>self</code>, but remember that we are in a class method (<code>+</code>), and it means that <code>self</code> is exactly the class <code>UIView</code> and not an her <code>instance</code>.</p>

<p>Now, coming back to the variable result:</p>

<p><strong>case <code>YES</code></strong>, with the same approach, we have just to <strong>replace the other method</strong> associating the <code>-mg_layoutSubviews</code> selector to the implementation of the <code>-layoutSubviews</code> method.</p>

<p><strong>case <code>NO</code></strong>, means that the method and his implementation already exist, and we have just to <strong>exchange the two implementations</strong> between them.</p>

<p><br/></p>

<h3>STEP 4</h3>

<h4>Call back <code>-layoutSubviews</code> (by the swizzled selector)</h4>

<p>Even if we exchanged the two implementations, we are still missing a part of our final diagram above: <strong>the arrow which calls the <code>-layoutSubviews</code> implementation</strong>.<br/>
In fact, at the moment, <code>UIView</code> will calls <code>-layoutSubviews</code>, which due the swizzling, it is associated with our new method. But we still have that method empty.</p>

<p>What we need, is close the circle executing also the original <code>-layoutSubviews</code> implementation. Just remember, that now that implementation can be executed calling the new selector <code>-mg_layoutSubviews</code>. So let&rsquo;s write it by code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//..category code</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">mg_layoutSuviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//..our extra code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..category code</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the circle is closed and we have our method, effectively, &ldquo;extended&rdquo;.
<br/></p>

<h2>Finalize</h2>

<p>As saw above, we wanted to use the <strong>class method</strong> <code>+mg_extendsLayoutSubviews</code> to write our swizzling code. So now, we have to call it in order to launch all this process.</p>

<p>The best method in which do it, is <code>+load</code>. This because that method is executed when the class is initially loaded.<br/>
Basically we are saying to the class to exchange his <code>SEL</code> -> <code>Method</code> (and therefore <code>IMP</code>) association in the <strong>dispatch table</strong>, and we are saying this directly when the class is loaded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="n">mg_createNewLayoutSubviews</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because we are changing this global state of the class, we need to do it extremely careful. For this reason, we use the <code>dispatch_once</code> function, which offers us the atomicity, and the guarantee that the code inside will be executed only once.</p>

<p>Being called by the class method <code>+load</code>, this explains why <code>+mg_createNewLayoutSubviews</code> is a class method too.
<br/></p>

<h2>Conclusion</h2>

<p>In the 90% of situations, you will not need to use this approach, but sometimes could be really useful. Just be sure you have not other solutions before to proceed, because since this is an extremely powerful way, it could be also extremely dangerous if you don&rsquo;t pay the maximum attention.</p>

<p><strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!</p>

<p>Enjoy ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interaction Object]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/10/30/interaction-object/"/>
    <updated>2014-10-30T23:16:22+00:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/10/30/interaction-object</id>
    <content type="html"><![CDATA[<p>As a developer I often find myself in the situation where I have to face the problem to store and get some kind of information in the most possible handy way.<br/>
In particular, this happens when you design a static menu list (e.g side panel or harburger menu) using a <code>UITableView</code>.</p>

<p>In this article I will go to explain how to implement it using the concept of <strong>Interaction Object</strong> in order to keep our code clean and testable.</p>

<!--more-->


<p><br/></p>

<h2>The problem</h2>

<p>In my last two companies I used to work, I was in the situation to create a menu list like so:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/interaction-object/1.jpg" height="300" alt="Hamburger Menu" /></p>

<p>As a static menu, it was not populated from any datasource, therefore I thought &ldquo;<strong>what is the best way to represent the menu items?</strong>&rdquo;.<br/>
A naïve and rude approach would be something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//....get/create a cell etc.</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cell</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Home&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cell</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Favourites&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//..</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span> <span class="n">goToHome</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>           <span class="p">[</span><span class="nb">self</span> <span class="n">goToFavourites</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;&hellip;</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/interaction-object/2.gif" height="300" alt="Shit" /></p>

<p>Yes, that’s ugly and not scalable.</p>

<p>What if you want to add another cell later? And if you want the new cell to be somewhere in the middle? You’d have to change every case&rsquo;s number. What if you want to display different cells according with a condition (i.e. user/admin)?</p>

<p>In short, this is not a good approach at all. So… how can we go with this?</p>

<p><br/></p>

<h2>The solution</h2>

<p>As a menu, any cell needs 3 basic and fundamental things:</p>

<ul>
<li>An image;</li>
<li>A title;</li>
<li>An action.</li>
</ul>


<p>The idea is to have a component (<strong>MGInteractionObject</strong>, precisely) to store these information, and having then an array of these components in order to associate them to the cells. Moreover, this approach will give us the opportunity to manage the array, choosing which items to show and which not to, according to certain events or conditions.</p>

<p>Therefore, the header file would look similar to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">performBlock</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">MGActionType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MGActionTypeBlock</span>        <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">MGActionTypeSelector</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MGInteractionObject</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">imageName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">MGActionType</span> <span class="n">actionType</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">performBlock</span> <span class="n">block</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">selector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">performBlock:</span><span class="p">(</span><span class="n">performBlock</span><span class="p">)</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, as I said, we store a <strong>title</strong> for the menu item, an <strong>image</strong> and an <strong>action</strong>, which will be performed by a <strong>block</strong>, or by a <strong>selector</strong> when the user taps on the menu entry. Finally, we have an <strong>enumeration</strong> in order to present to the developer the different ways to perform the action.<br/>
For simplicity, here I reported just some basic information to store, but it could be expanded a lot further, for example with the following properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">highlightedTitle</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">highlightedImageName</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">backgroundColor</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">highlightedBackgroundColor</span><span class="p">;</span>
</span><span class='line'><span class="c1">//..etc</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we the header is defined, it&rsquo;s the time to have start move on to the implementation:</p>

<p>Now that we know the header, it&rsquo;s the time to have a look to the implementation code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;MGInteractionObject.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MGInteractionObject</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Public init</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@throw</span> <span class="p">[</span><span class="bp">NSException</span>
</span><span class='line'>        <span class="nl">exceptionWithName</span><span class="p">:</span><span class="n">NSInternalInconsistencyException</span>
</span><span class='line'>                   <span class="nl">reason</span><span class="p">:</span><span class="s">@&quot;Must use initWithTitle:imageName:selector: or initWithTitle:imageName:performBlock:&quot;</span>
</span><span class='line'>                 <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">selector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="n">title</span> <span class="nl">imageName</span><span class="p">:</span><span class="n">imageName</span> <span class="nl">selector</span><span class="p">:</span><span class="n">selector</span> <span class="nl">performBlock</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">performBlock:</span><span class="p">(</span><span class="n">performBlock</span><span class="p">)</span><span class="nv">block</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="n">title</span> <span class="nl">imageName</span><span class="p">:</span><span class="n">imageName</span> <span class="nl">selector</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">performBlock</span><span class="p">:</span><span class="n">block</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Private init</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">selector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="nf">performBlock:</span><span class="p">(</span><span class="n">performBlock</span><span class="p">)</span><span class="nv">block</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_title</span> <span class="o">=</span> <span class="p">[</span><span class="n">title</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_imageName</span> <span class="o">=</span> <span class="p">[</span><span class="n">imageName</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_selector</span> <span class="o">=</span> <span class="n">selector</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_block</span> <span class="o">=</span> <span class="p">[</span><span class="n">block</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_actionType</span> <span class="o">=</span> <span class="p">(</span><span class="n">selector</span><span class="p">)</span> <span class="o">?</span> <span class="nl">MGActionTypeSelector</span> <span class="p">:</span> <span class="n">MGActionTypeBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple as that.<br/>
Now that we have the base element, let’s proceed to use it properly.<br/>
<br/></p>

<h2>How to use it</h2>

<p>What we need to do now, is to create an interaction object for each menu item.<br/>
Supposing to have <strong>4 items</strong>:</p>

<ul>
<li>Home;</li>
<li>Favourites;</li>
<li>Stores;</li>
<li>Admin options.</li>
</ul>


<p>we can simply go to create <strong>4 interaction objects</strong> like these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_createMenuInteractionItemsForUser:</span><span class="p">(</span><span class="n">MGUser</span> <span class="o">*</span><span class="p">)</span><span class="nv">user</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">__weak</span> <span class="k">typeof</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objHome</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Home&quot;</span>
</span><span class='line'>                                         <span class="nl">imageName</span><span class="p">:</span><span class="s">@&quot;icon_home&quot;</span>
</span><span class='line'>                                   <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">openHome</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objFavourites</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Favourites&quot;</span>
</span><span class='line'>                                         <span class="nl">imageName</span><span class="p">:</span><span class="s">@&quot;icon_favourites&quot;</span>
</span><span class='line'>                                      <span class="nl">performBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                                    <span class="c1">//Do something    </span>
</span><span class='line'>                                                    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objStores</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Stores&quot;</span>
</span><span class='line'>                                         <span class="nl">imageName</span><span class="p">:</span><span class="s">@&quot;icon_stores&quot;</span>
</span><span class='line'>                                   <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">openStores</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Prepare tableButtons</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">tableButtons</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">isAdmin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objAdmin</span> <span class="o">=</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Admin options&quot;</span>
</span><span class='line'>                                             <span class="nl">imageName</span><span class="p">:</span><span class="s">@&quot;icon_admin&quot;</span>
</span><span class='line'>                                          <span class="nl">performBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                                        <span class="c1">//Do something        </span>
</span><span class='line'>                                                        <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tableButtons</span> <span class="o">=</span> <span class="l">@[</span>
</span><span class='line'>                        <span class="n">objHome</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objFavourites</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objStores</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objAdmin</span>
</span><span class='line'>                        <span class="l">]</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tableButtons</span> <span class="o">=</span> <span class="l">@[</span>
</span><span class='line'>                        <span class="n">objHome</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objFavourites</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objStores</span>
</span><span class='line'>                        <span class="l">]</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">tableButtons</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having these 4 objects, we return an array of <code>MGInteractionObject</code>, according with the conditions we want to consider. In this example, it is checked if the user is an admin (<code>user.isAdmin</code>) to decide <strong>if add or not the admin interaction object</strong>, in the array <code>tableButtons</code>.</p>

<p>Now all we need to do yet is to reload the tableview to show the content. Here is the implementation of <code>tableView:cellForRowAtIndexPath:</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">cellIdentifier</span> <span class="o">=</span> <span class="s">@&quot;InteractionCell&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier</span><span class="p">:</span><span class="n">cellIdentifier</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">cell</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MGInteractionCell</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStyle</span><span class="p">:</span><span class="n">UITableViewCellStyleDefault</span> <span class="nl">reuseIdentifier</span><span class="p">:</span><span class="n">cellIdentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Get the interaction object</span>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">interactionObject</span> <span class="o">=</span> <span class="n">_tableButtons</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Set the interaction object for this cell to configure it</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">interactionObject</span> <span class="o">=</span> <span class="n">interactionObject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are using a custom cell <code>MGInteractionCell</code> which has the property <code>interactionObject</code>, which through the <strong>setter</strong> method, configures the cell.</p>

<p>Obviously, it could be also used a normal <code>UITableViewCell</code> setting the <code>title</code> and the <code>image</code> directly from this method.</p>

<p>Finally, when a user taps on a cell, the method <code>tableView:didSelectRowAtIndexPath:</code> is called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//Get the interaction object</span>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">interactionObject</span> <span class="o">=</span> <span class="n">_tableButtons</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Perform the block or the selector</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">interactionObject</span><span class="p">.</span><span class="n">interactionType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MGActionTypeBlock</span><span class="p">:</span>
</span><span class='line'>            <span class="n">interactionObject</span><span class="p">.</span><span class="n">block</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MGActionTypeSelector</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">interactionObject</span><span class="p">.</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="n">interactionObject</span><span class="p">.</span><span class="n">selector</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we check the interaction type and make a call to the block or perform the selector.</p>

<p>And..</p>

<p>..that&rsquo;s it!</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/interaction-object/3.gif" height="300" alt="Happy" /></p>

<p><strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!</p>

<p>Enjoy! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autorelease - Under the Hood]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/09/28/autorelease-under-the-hood/"/>
    <updated>2014-09-28T23:24:37+01:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/09/28/autorelease-under-the-hood</id>
    <content type="html"><![CDATA[<p>Since this is an argument less touched but much important, I decided to write an article to organize the informations and explain how <code>autorelease</code>, or better <strong>autorelease pool</strong> works.</p>

<p>The main goal of this article is not to explain the base of what is an <strong>autorelease pool</strong> and when <code>autorelease</code> should be used, but anyway, this is really important to understand these concepts before proceeding. For this reason, the first paragraph will be dedicated to explain them. Experts developers, can safely skip it if they want.</p>

<!--more-->


<p>
<br /></p>

<h2>What and when</h2>

<p>As the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html">Apple documentation</a> says:</p>

<blockquote>
Autorelease pool blocks provide a mechanism whereby you can relinquish ownership of an object, but avoid the possibility of it being deallocated immediately (such as when you return an object from a method). Typically, you don’t need to create your own autorelease pool blocks, but there are some situations in which either you must or it is beneficial to do so.
</blockquote>


<p>Let&rsquo;s look at a couple of examples:</p>

<p>Before <strong>ARC</strong>, there was our much less friend called <strong><a href="https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html">MRC</a></strong>, which stands for <strong>Manual Reference Counting</strong>. Even if today it is still present on XCode, it is not longer used and the &ldquo;bad job&rdquo; of using <code>retain</code>, <code>release</code> and <code>autorelease</code>,  is left to the compiler.
But let&rsquo;s think for a while to be in a MRC environment and to have these methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* MGClassA */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MGClassB</span> <span class="o">*</span><span class="n">objB</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGClassB</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newObj</span> <span class="o">=</span> <span class="p">[</span><span class="n">objB</span> <span class="n">getAnObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//do something..</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">objB</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/* MGClassB */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">getAnObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newObj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">newObj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>in the first method, an object typed <code>MGClassB</code> is allocated and temporary retained from the object of type <code>MGClassA</code>; then <code>objB</code> is asked to allocate, initialize and return a new object. So at this point we have this situation:</p>

<p><code>objA</code>  &mdash;<strong>retains</strong>&mdash;>  <code>objB</code></p>

<p><code>objB</code>  &mdash;<strong>retains</strong>&mdash;>  <code>newObj</code></p>

<p>please note that <code>objA</code> is not calling <code>retain</code> after having obtained <code>newObj</code>, so it has no ownership and <code>newObj</code> still has a retain count equals to 1.<br/>
At this point, <code>method</code> finishes and releases <code>objB</code>, which is not referenced anymore and it is still retaining <code>newObj</code>. This object will therefore remain allocated in memory generating the <strong>memory leak</strong>. From <a href="https://developer.apple.com/library/ios/documentation/performance/conceptual/managingmemory/articles/FindingLeaks.html">Apple documentation</a></p>

<blockquote>
Memory leaks are blocks of allocated memory that the program no longer references.
</blockquote>


<p>This means that being <code>newObj</code> just pointed from <code>objB</code>, but being <code>objB</code> NOT pointed from anyone, it will be no longer possible have a reference to release <code>newObj</code> which will remain allocated until the application will be not closed.</p>

<p>How can we solve this issue?
<code>autorelease</code>, keep the object alive for a period of time. Then, the object is automatically released, avoiding so, a memory leak:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* MGClassB */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">getAnObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newObj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">newObj</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the next paragraph we will go in depth explaining why in this example doesn&rsquo;t appear an <strong>autorelease pool</strong>, but before, let&rsquo;s go to have a look to another situation where you need to create that.<br/>
An <strong>autorelease pool</strong> is a container where autoreleased objects are placed. When the pool is drained, every object in the container is released. This could be very useful in a situation like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSAutoreleasePool</span> <span class="o">*</span><span class="n">myPool</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSAutoreleasePool</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Do something that creates a lot of temporary objects autoreleased. */</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">myPool</span> <span class="n">drain</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>that in the modern <strong>Objective-C</strong> becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="cm">/* Do something that creates a lot of temporary objects autoreleased. */</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This cyle, is executed 10.000 times. You maybe don&rsquo;t know how many objects will be allocated in your code, but without using <code>@autoreleasepool</code>, the memory would be filled with a lot of objects allocations, that instead at the end of each cycle would be no longer used. This could have an impact on the the performance of the app and could cause risk of memory warnings.<br/>
Using <code>@autoreleasepool</code>, objects would be instead released at the end of the autorelease&rsquo;s scope.</p>

<p>Note that with ARC, you can&rsquo;t call <code>release</code> or <code>autorelease</code>, so having <code>@autoreleasepool</code> sometime is even more useful.
<br />
<br /></p>

<h2>Under the hood</h2>

<p>We know that an object which is autoreleased, goes in an autorelease pool, but keep in mind this example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* MGClassB */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">getAnObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newObj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">newObj</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>the question is: <strong>what autorelease pool does <code>newObj</code> go in?</strong><br/>
The answer is easy, and it is in the file named <code>main.m</code> in the folder <code>Supporting Files</code> of any XCode project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, the <code>main</code> method <strong>has the first autorelease pool</strong> of the entire project.
So in our example, <code>newObj</code> goes in the main autorelease pool, which is drained when the current <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">Run Loop</a> terminates.<br/>
We are obviously supposing to be in the main thread, but however, in general, <strong>every thread has his main autorelease pool</strong>.</p>

<p>So now that we know the theory, the next question is: <strong>where does the autoreleased object found the pointer to the correct autorelease pool?</strong>
As the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html">Apple Documentation</a> says:</p>

<blockquote>
Each thread in a Cocoa application maintains its own stack of autorelease pool blocks.
</blockquote>


<p>and this is.  Simple as that!<br/>
So basically when the object call <code>autorelease</code>, it does something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">autorelease</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AutoreleasePool</span> <span class="o">*</span><span class="n">pool</span> <span class="o">=</span> <span class="cm">/* Take from the stack the most recently autorelease pool */</span>
</span><span class='line'>    <span class="p">[</span><span class="n">pool</span> <span class="nl">add</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, since autorelease&rsquo;s pool can be several and nested, <strong>there MUST be a stack</strong>.<br/>
This is of course an high level code to make it easier to understand, but the open source Apple&rsquo;s implementation of autorelease is <a href="http://opensource.apple.com/source/objc4/objc4-493.9/runtime/objc-arr.mm">here</a>.</p>

<p>The last thing to stress, regards the autorelease pool&rsquo;s container.<br/>
Indeed, <strong>what datastructure does an autorelease pool use to store objects to release?</strong><br/>
Let&rsquo;s try:</p>

<ul>
<li><code>NSMutableArray</code>: no, because it would retain the object calling <code>-addObject</code>. This would make the autorelease vain;</li>
<li><code>NSMutableDictionary</code>: no, for the same reason of the previous;</li>
<li><code>NSMutableSet</code>: no, for the same reason of the previous and because doesn&rsquo;t accept repeated object.</li>
</ul>


<p>So what does it use?<br/>
Easy: any data structure which <strong>doesn&rsquo;t retains the object</strong> and that <strong>accepts repeated objects</strong>, like for example <code>NSPointerArray</code> with <code>weak</code> objects references, <code>LinkedList</code>, etc.
<br />
<br /></p>

<h2>Conclusion</h2>

<p>I hope that this article has cleared every doubt about the <code>autorelease</code> method and the <strong>autorelease pool</strong>. Even if the management of an autorelease pool will be always a system&rsquo;s responsibility, it is very important to understand how it works.</p>

<p><strong>Follow me on <a href="https://twitter.com/matteo_gobbi">Twitter</a></strong>!</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
