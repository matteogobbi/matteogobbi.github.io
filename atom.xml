<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matteo Gobbi]]></title>
  <link href="http://matteogobbi.github.io/atom.xml" rel="self"/>
  <link href="http://matteogobbi.github.io/"/>
  <updated>2014-12-25T01:56:20+00:00</updated>
  <id>http://matteogobbi.github.io/</id>
  <author>
    <name><![CDATA[Matteo Gobbi]]></name>
    <email><![CDATA[job@matteogobbi.it]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending Methods in a Category by Method Swizzling]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/12/15/extending-methods-in-a-category-by-method-swizzling/"/>
    <updated>2014-12-15T21:57:25+00:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/12/15/extending-methods-in-a-category-by-method-swizzling</id>
    <content type="html"><![CDATA[<p>Override a method in a category <strong>is NOT possible</strong>.</p>

<p>Probably is happened to you too to being writing a category and at a certain point exclaming &ldquo;<strong>F**K! It&rsquo;s a category!</strong>&rdquo;.
Yes, and probably was becuase you accidentally tried to override a method without remembering that effectly, you was writing a category.</p>

<p>In the largest percentage of situations, when you need to <strong>override a method</strong>, you want to write a <strong>subclass</strong>; when instead you want to <strong>write a category</strong> for a class, it is because you probabily need to have some <strong>new methods</strong> or <strong>properties</strong> you would like every subclass of that class will can to use.</p>

<p>There is only another situation in front of which you could be confused, and this is when you are in both the previous cases, <strong>together</strong>.</p>

<!--more-->


<p><br/></p>

<h2>The problem</h2>

<p>Let&rsquo;s suppose you want to add some generic code in <code>-layoutSubviews</code>. The first thing which comes in your mind is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Your extra code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great.</p>

<p>Wait..let&rsquo;s suppose also you would like every subclass of <code>UIView</code> would implements an <strong>extra code</strong>, like for instance logging something or checking a property before do something elese.<br/>
Make this by sublcassing would be time-consuming and would implies code ripetition as you should create a sublcass and override the <code>-layoutSubviews</code> method for <code>UIView</code>, for <code>UIImageView</code>, for <code>UIControl</code>, for <code>UILabel</code> and so on, as well as set these subclasses for any new and old class&hellip;</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/swizzling/1.jpg" height="300" alt="..say again?" /></p>

<p>Exactly, it is <strong>unthinkable</strong>.</p>

<p>When we need to add functionalities or properties to a class, we normaly write a single <strong>Category</strong> for the higher superclass we need to extend. In this case that class would be <code>UIView</code>. But, we still have a problem: we <strong>don&rsquo;t want to add a new method</strong>, we want to <strong>extend an existing method</strong>.<br/>
We know that this is not possible, as a category is a class extension, and implement an existing method like <code>layoutSubviews</code>, would results in a method ripetition. As figurative and easy example think just to something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//UIView standard code...</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//..default UIView code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...UIView standard code</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//My layoutSubviews method</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//..my code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what can we do?<br/>
<br/></p>

<h2>Playing around the problem with Method Swizzling</h2>

<p><strong>Method Swizzling</strong> is a technique with which, roughly speaking, you can swipe two methods making <strong>the selector of the first method calls the second method and vice-versa</strong>.</p>

<p>The idea is to <strong>create a new method</strong> and <strong>swap his implementation with the <code>-layoutSubviews</code> one</strong>. Therefore, calling <code>-layoutSubviews</code>, will be effectly executed the new method with our new code, and in the new method, we will also call his selector, which instead will executes the <code>-layoutSubviews</code> original method.</p>

<p>Calm down, I know, it&rsquo;s not easy to explain and to understand with these few lines above. So I created a couple of diagrams to have in mind a visual image of the situation:</p>

<h4>The normal condition we have is the following:</h4>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/swizzling/2.png" height="400" alt="normal condition" /></p>

<h4>The condition we want to pull out, is instead this:</h4>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/swizzling/3.png" height="400" alt="normal condition" /></p>

<p>Being <strong>not possible insert extra code</strong> in the <code>-layoutSubviews</code> method, in a category, we have to <strong>redirect the flow through our custom method</strong>, in order to manipulate it.</p>

<p>Now, it&rsquo;s the time to have a look at the explained code step by step.</p>

<p>Let&rsquo;s start by saying that Apple offers a set of <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html">C functions</a>, useful to manipulate <strong>properties</strong>, <strong>ivars</strong>, <strong>classes</strong>, <strong>methods</strong> and so on, at <strong>runtime</strong>. We are gonna see some of these in order to sort our situation.<br/>
<br/></p>

<h3>STEP 1</h3>

<h4>Add the new method</h4>

<p>The firs thing to do, is to add a new (empty for now) method to our category. This method, will be the one containing our <strong>code extension</strong> or our part of code we want to be executed when <code>-layoutSubviews</code> is called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="bp">UIView</span> <span class="nl">(MG_layoutSubviews)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br/></p>

<h3>STEP 2</h3>

<h4>Write the swizzling method - First part</h4>

<p>The method containing the <strong>swizzling</strong> code, needs to be a class method. We will see the reason later.
We must to remeber that we are doing this to have an extended <code>-layoutSubviews</code> default implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//..category code</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_extendsLayoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//PART 1</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">thisClass</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//layoutSubviews selector, method, implementation</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">layoutSubviewsSEL</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">layoutSubviews</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">layoutSubviewsMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">layoutSubviewsSEL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">layoutSubviewsIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//mg_layoutSubviews selector, method, implementation</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">mg_layoutSubviewsSEL</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">mg_layoutSubviews</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">mg_layoutSubviewsMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">mg_layoutSubviewsSEL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">mg_layoutSubviewsIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">mg_layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//....</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..category code</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>class_getInstanceMethod</code> return the method which corresponds to the <strong>implementation of the selector and the class</strong> specified, or <code>NULL</code> if the specified class or its superclasses do not contain an instance method with the specified selector.</p>

<p><code>method_getImplementation</code> return <strong>a function pointer of type <code>IMP</code>.</strong></p>

<p>It is important to underline that each class has a <strong>dispatch table</strong>, and as <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html">Apple says</a>:</p>

<blockquote>
This table has entries that associate method selectors with the class-specific addresses of the methods they identify. 
</blockquote>


<p>So basically, <code>Method</code> is the glue between <code>SEL</code> and <code>IMP</code>, and at this point we have completely access to these information.</p>

<p><br/></p>

<h3>STEP 3</h3>

<h4>Write the swizzling method - Second part</h4>

<p>Now, we need to exchange the two implementations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//..category code</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_extendsLayoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//PART 1</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">thisClass</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//layoutSubviews selector, method, implementation</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">layoutSubviewsSEL</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">layoutSubviews</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">layoutSubviewsMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">layoutSubviewsSEL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">layoutSubviewsIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//mg_layoutSubviews selector, method, implementation</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">mg_layoutSubviewsSEL</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">mg_layoutSubviews</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">mg_layoutSubviewsMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">mg_layoutSubviewsSEL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">mg_layoutSubviewsIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">mg_layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//PART 2</span>
</span><span class='line'>    <span class="c1">//Try to add the method layoutSubviews with the new implementation (if already exists it&#39;ll return NO)</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">wasMethodAdded</span> <span class="o">=</span> <span class="n">class_addMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">layoutSubviewsSEL</span><span class="p">,</span> <span class="n">mg_layoutSubviewsIMP</span><span class="p">,</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">mg_layoutSubviewsMethod</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">wasMethodAdded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Just set the new selector points to the original layoutSubviews method</span>
</span><span class='line'>        <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">thisClass</span><span class="p">,</span> <span class="n">mg_layoutSubviewsSEL</span><span class="p">,</span> <span class="n">layoutSubviewsIMP</span><span class="p">,</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">layoutSubviewsMethod</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">layoutSubviewsMethod</span><span class="p">,</span> <span class="n">mg_layoutSubviewsMethod</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..category code</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s happening in this code it is not really hard as could to seem.<br/>
The first thing to do is to <strong>try to add the method</strong> <code>-layoutSubviews</code>. In fact, also if this method is in the default implementation of <code>UIView</code>, it <strong>could not be implemented in the subclass</strong> of <code>UIView</code> which the developer is gonna write. It means, that <strong>could not exists an associated implementation for that subclass</strong>, but just for the superclass.</p>

<p>Using the function <code>BOOL class_addMethod ( Class cls, SEL name, IMP imp, const char *types )</code>, we can add in a <code>Class</code> a <strong>method associated to an implementation and called by a selector</strong>.
Therefore, if the method will results to be not implemented, the returned var will be <code>YES</code>; if instead there will be an error due for example the fact just explained above, the resulted var will be equals to <code>NO</code>.</p>

<p>In this code, we are adding a method called by the <code>-layoutSubviews</code> selector, but with the implementation of our new <code>-mg_layoutSubviews</code> method. The last parameter is an array of characters that describe the types of the arguments to the method.<br/>
Please note that <code>thisClass</code> is equals to <code>self</code>, but remember that we are in a class method (<code>+</code>), and it means that <code>self</code> is exactly the class <code>UIView</code> and not an her <code>instance</code>.</p>

<p>Now, coming back to the variable result:</p>

<p><strong>case <code>YES</code></strong>, with the same approach, we have just to <strong>replace the other method</strong> associating the <code>-mg_layoutSubviews</code> selector to the implementation of the <code>-layoutSubviews</code> method.</p>

<p><strong>case <code>NO</code></strong>, means that the method and his implementation already exist, and we have just to <strong>exchange the two implementations</strong> between them.</p>

<p><br/></p>

<h3>STEP 4</h3>

<h4>Call back <code>-layoutSubviews</code> (by the swizzled selector)</h4>

<p>Even if we exchanged the two implementations, we are still missing a part of our final diagram above: <strong>the arrow which calls the <code>-layoutSubviews</code> implementation</strong>.<br/>
In fact, at the moment, <code>UIView</code> will calls <code>-layoutSubviews</code>, which due the swizzling, it is associated with our new method. But we still have that method empty.</p>

<p>What we need, is close the cirle executing also the original <code>-layoutSubviews</code> implementation. Just remember, that now that implementation can be executed calling the new selector <code>mg_layoutSubviews</code>. So let&rsquo;s write it by code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//..category code</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">mg_layoutSuviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//..our extra code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..category code</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the circle is closed and we have our method, effectly, &ldquo;extended&rdquo;.
<br/></p>

<h2>Finalize</h2>

<p>As saw above, we wanted to use the <strong>class method</strong> <code>+mg_extendsLayoutSubviews</code> to write our swizzling code. So now, we have to call it in order to launch all this process.</p>

<p>The best method in which do it, is <code>+load</code>. This because that method is executed when the class is initially loaded.<br/>
Basically we are saying to the class to exchange his <code>SEL</code> -> <code>Method</code> (and therefore <code>IMP</code>) association in the <strong>dispatch table</strong>, and we are saying this directly when the class is loaded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="n">mg_createNewLayoutSubviews</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because we are changing this global state of the class, we need to do it extremely careful. For this reason, we use the <code>dispatch_once</code> function, which offers us the atomicity, and the guarantee that the code inside will be executed only once.</p>

<p>Being called by the class method <code>+load</code>, this explains why <code>+mg_createNewLayoutSubviews</code> is a class method too.
<br/></p>

<h2>Conclusion</h2>

<p>In the 90% of situations, you will not need to use this approach, but sometimes could be really useful. Just be sure you have not other solutions before to proceed, because since this is an extremely powerful way, it could be also extremely dangerous if you don&rsquo;t pay the maximum attention.</p>

<p>Enjoy ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interaction Object]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/10/30/interaction-object/"/>
    <updated>2014-10-30T23:16:22+00:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/10/30/interaction-object</id>
    <content type="html"><![CDATA[<p>As a developer I often find myself in the situation where I have to face the problem to store and get some kind of information in the most possible handy way.<br/>
In particular, this happens when you design a static menu list (e.g side panel or harburger menu) using a <code>UITableView</code>.</p>

<p>In this article I will go to explain how to implement it using the concept of <strong>Interaction Object</strong> in order to keep our code clean and testable.</p>

<!--more-->


<p><br/></p>

<h2>The problem</h2>

<p>In my last two companies I used to work, I was in the situation to create a menu list like so:</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/interaction-object/1.jpg" height="300" alt="Hamburger Menu" /></p>

<p>As a static menu, it was not populated from any datasource, therefore I thought &ldquo;<strong>what is the best way to represent the menu items?</strong>&rdquo;.<br/>
A naïve and rude approach would be something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//....get/create a cell etc.</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cell</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Home&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cell</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Favourites&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//..</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span> <span class="n">goToHome</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>           <span class="p">[</span><span class="nb">self</span> <span class="n">goToFavourites</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;&hellip;</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/interaction-object/2.gif" height="300" alt="Shit" /></p>

<p>Yes, that’s ugly and not scalable.</p>

<p>What if you want to add another cell later? And if you want the new cell to be somewhere in the middle? You’d have to change every case&rsquo;s number. What if you want to display different cells according with a condition (i.e. user/admin)?</p>

<p>In short, this is not a good approach at all. So… how can we go with this?</p>

<p><br/></p>

<h2>The solution</h2>

<p>As a menu, any cell needs 3 basic and fundamental things:</p>

<ul>
<li>An image;</li>
<li>A title;</li>
<li>An action.</li>
</ul>


<p>The idea is to have a component (<strong>MGInteractionObject</strong>, precisely) to store these information, and having then an array of these components in order to associate them to the cells. Moreover, this approach will give us the opportunity to manage the array, choosing which items to show and which not to, according to certain events or conditions.</p>

<p>Therefore, the header file would look similar to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">performBlock</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">MGActionType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MGActionTypeBlock</span>        <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">MGActionTypeSelector</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MGInteractionObject</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">imageName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">MGActionType</span> <span class="n">actionType</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">performBlock</span> <span class="n">block</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">selector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">performBlock:</span><span class="p">(</span><span class="n">performBlock</span><span class="p">)</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, as I said, we store a <strong>title</strong> for the menu item, an <strong>image</strong> and an <strong>action</strong>, which will be performed by a <strong>block</strong>, or by a <strong>selector</strong> when the user taps on the menu entry. Finally, we have an <strong>enumeration</strong> in order to present to the developer the different ways to perform the action.<br/>
For simplicity, here I reported just some basic information to store, but it could be expanded a lot further, for example with the following properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">highlightedTitle</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">highlightedImageName</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">backgroundColor</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">highlightedBackgroundColor</span><span class="p">;</span>
</span><span class='line'><span class="c1">//..etc</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we the header is defined, it&rsquo;s the time to have start move on to the implementation:</p>

<p>Now that we know the header, it&rsquo;s the time to have a look to the implementation code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;MGInteractionObject.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MGInteractionObject</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Public init</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@throw</span> <span class="p">[</span><span class="bp">NSException</span>
</span><span class='line'>        <span class="nl">exceptionWithName</span><span class="p">:</span><span class="n">NSInternalInconsistencyException</span>
</span><span class='line'>                   <span class="nl">reason</span><span class="p">:</span><span class="s">@&quot;Must use initWithTitle:imageName:selector: or initWithTitle:imageName:performBlock:&quot;</span>
</span><span class='line'>                 <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">selector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="n">title</span> <span class="nl">imageName</span><span class="p">:</span><span class="n">imageName</span> <span class="nl">selector</span><span class="p">:</span><span class="n">selector</span> <span class="nl">performBlock</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">performBlock:</span><span class="p">(</span><span class="n">performBlock</span><span class="p">)</span><span class="nv">block</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="n">title</span> <span class="nl">imageName</span><span class="p">:</span><span class="n">imageName</span> <span class="nl">selector</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">performBlock</span><span class="p">:</span><span class="n">block</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Private init</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">imageName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="nf">selector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="nf">performBlock:</span><span class="p">(</span><span class="n">performBlock</span><span class="p">)</span><span class="nv">block</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_title</span> <span class="o">=</span> <span class="p">[</span><span class="n">title</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_imageName</span> <span class="o">=</span> <span class="p">[</span><span class="n">imageName</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_selector</span> <span class="o">=</span> <span class="n">selector</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_block</span> <span class="o">=</span> <span class="p">[</span><span class="n">block</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_actionType</span> <span class="o">=</span> <span class="p">(</span><span class="n">selector</span><span class="p">)</span> <span class="o">?</span> <span class="nl">MGActionTypeSelector</span> <span class="p">:</span> <span class="n">MGActionTypeBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple as that.<br/>
Now that we have the base element, let’s proceed to use it properly.<br/>
<br/></p>

<h2>How to use it</h2>

<p>What we need to do now, is to create an interaction object for each menu item.<br/>
Supposing to have <strong>4 items</strong>:</p>

<ul>
<li>Home;</li>
<li>Favourites;</li>
<li>Stores;</li>
<li>Admin options.</li>
</ul>


<p>we can simply go to create <strong>4 interaction objects</strong> like these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mg_createMenuInteractionItemsForUser:</span><span class="p">(</span><span class="n">MGUser</span> <span class="o">*</span><span class="p">)</span><span class="nv">user</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">__weak</span> <span class="k">typeof</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objHome</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Home&quot;</span>
</span><span class='line'>                                         <span class="nl">imageName</span><span class="p">:</span><span class="s">@&quot;icon_home&quot;</span>
</span><span class='line'>                                   <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">openHome</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objFavourites</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Favourites&quot;</span>
</span><span class='line'>                                         <span class="nl">imageName</span><span class="p">:</span><span class="s">@&quot;icon_favourites&quot;</span>
</span><span class='line'>                                      <span class="nl">performBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                                    <span class="c1">//Do something    </span>
</span><span class='line'>                                                    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objStores</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Stores&quot;</span>
</span><span class='line'>                                         <span class="nl">imageName</span><span class="p">:</span><span class="s">@&quot;icon_stores&quot;</span>
</span><span class='line'>                                   <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">openStores</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Prepare tableButtons</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">tableButtons</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">isAdmin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">objAdmin</span> <span class="o">=</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">MGInteractionObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Admin options&quot;</span>
</span><span class='line'>                                             <span class="nl">imageName</span><span class="p">:</span><span class="s">@&quot;icon_admin&quot;</span>
</span><span class='line'>                                          <span class="nl">performBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                                        <span class="c1">//Do something        </span>
</span><span class='line'>                                                        <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tableButtons</span> <span class="o">=</span> <span class="l">@[</span>
</span><span class='line'>                        <span class="n">objHome</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objFavourites</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objStores</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objAdmin</span>
</span><span class='line'>                        <span class="l">]</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tableButtons</span> <span class="o">=</span> <span class="l">@[</span>
</span><span class='line'>                        <span class="n">objHome</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objFavourites</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">objStores</span>
</span><span class='line'>                        <span class="l">]</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">tableButtons</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having these 4 objects, we return an array of <code>MGInteractionObject</code>, according with the conditions we want to consider. In this example, it is checked if the user is an admin (<code>user.isAdmin</code>) to decide <strong>if add or not the admin interaction object</strong>, in the array <code>tableButtons</code>.</p>

<p>Now all we need to do yet is to reload the tableview to show the content. Here is the implementation of <code>tableView:cellForRowAtIndexPath:</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">cellIdentifier</span> <span class="o">=</span> <span class="s">@&quot;InteractionCell&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MGInteractionCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier</span><span class="p">:</span><span class="n">cellIdentifier</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">cell</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MGInteractionCell</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStyle</span><span class="p">:</span><span class="n">UITableViewCellStyleDefault</span> <span class="nl">reuseIdentifier</span><span class="p">:</span><span class="n">cellIdentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Get the interaction object</span>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">interactionObject</span> <span class="o">=</span> <span class="n">_tableButtons</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Set the interaction object for this cell to configure it</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">interactionObject</span> <span class="o">=</span> <span class="n">interactionObject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are using a custom cell <code>MGInteractionCell</code> which has the property <code>interactionObject</code>, which through the <strong>setter</strong> method, configures the cell.</p>

<p>Obviously, it could be also used a normal <code>UITableViewCell</code> setting the <code>title</code> and the <code>image</code> directly from this method.</p>

<p>Finally, when a user taps on a cell, the method <code>tableView:didSelectRowAtIndexPath:</code> is called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//Get the interaction object</span>
</span><span class='line'>    <span class="n">MGInteractionObject</span> <span class="o">*</span><span class="n">interactionObject</span> <span class="o">=</span> <span class="n">_tableButtons</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Perform the block or the selector</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">interactionObject</span><span class="p">.</span><span class="n">interactionType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MGActionTypeBlock</span><span class="p">:</span>
</span><span class='line'>            <span class="n">interactionObject</span><span class="p">.</span><span class="n">block</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MGActionTypeSelector</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">interactionObject</span><span class="p">.</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="n">interactionObject</span><span class="p">.</span><span class="n">selector</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we check the interaction type and make a call to the block or perform the selector.</p>

<p>And..</p>

<p>..that&rsquo;s it!</p>

<p style="text-align:center;"> <img src="http://matteogobbi.github.io/../images/posts/interaction-object/3.gif" height="300" alt="Happy" /></p>

<p>Enjoy! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autorelease - Under the Hood]]></title>
    <link href="http://matteogobbi.github.io/blog/2014/09/28/autorelease-under-the-hood/"/>
    <updated>2014-09-28T23:24:37+01:00</updated>
    <id>http://matteogobbi.github.io/blog/2014/09/28/autorelease-under-the-hood</id>
    <content type="html"><![CDATA[<p>Since this is an argument less touched but much important, I decided to write an article to organize the informations and explain how <code>autorelease</code>, or better <strong>autorelease pool</strong> works.</p>

<p>The main goal of this article is not to explain the base of what is an <strong>autorelease pool</strong> and when <code>autorelease</code> should be used, but anyway, this is really important to understand these concepts before proceeding. For this reason, the first paragraph will be dedicated to explain them. Experts developers, can safely skip it if they want.</p>

<!--more-->


<p>
<br /></p>

<h2>What and when</h2>

<p>As the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html">Apple documentation</a> says:</p>

<blockquote>
Autorelease pool blocks provide a mechanism whereby you can relinquish ownership of an object, but avoid the possibility of it being deallocated immediately (such as when you return an object from a method). Typically, you don’t need to create your own autorelease pool blocks, but there are some situations in which either you must or it is beneficial to do so.
</blockquote>


<p>Let&rsquo;s look at a couple of examples:</p>

<p>Before <strong>ARC</strong>, there was our much less friend called <strong><a href="https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/introduction/introduction.html">MRC</a></strong>, which stands for <strong>Manual Reference Counting</strong>. Even if today it is still present on XCode, it is not longer used and the &ldquo;bad job&rdquo; of using <code>retain</code>, <code>release</code> and <code>autorelease</code>,  is left to the compiler.
But let&rsquo;s think for a while to be in a MRC environment and to have these methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* MGClassA */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MGClassB</span> <span class="o">*</span><span class="n">objB</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGClassB</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newObj</span> <span class="o">=</span> <span class="p">[</span><span class="n">objB</span> <span class="n">getAnObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//do something..</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">objB</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/* MGClassB */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">getAnObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newObj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">newObj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>in the first method, an object typed <code>MGClassB</code> is allocated and temporary retained from the object of type <code>MGClassA</code>; then <code>objB</code> is asked to allocate, initialize and return a new object. So at this point we have this situation:</p>

<p><code>objA</code>  &mdash;<strong>retains</strong>&mdash;>  <code>objB</code></p>

<p><code>objB</code>  &mdash;<strong>retains</strong>&mdash;>  <code>newObj</code></p>

<p>please note that <code>objA</code> is not calling <code>retain</code> after having obtained <code>newObj</code>, so it has no ownership and <code>newObj</code> still has a retain count equals to 1.<br/>
At this point, <code>method</code> finishes and releases <code>objB</code>, which is not referenced anymore and it is still retaining <code>newObj</code>. This object will therefore remain allocated in memory generating the <strong>memory leak</strong>. From <a href="https://developer.apple.com/library/ios/documentation/performance/conceptual/managingmemory/articles/FindingLeaks.html">Apple documentation</a></p>

<blockquote>
Memory leaks are blocks of allocated memory that the program no longer references.
</blockquote>


<p>This means that being <code>newObj</code> just pointed from <code>objB</code>, but being <code>objB</code> NOT pointed from anyone, it will be no longer possible have a reference to release <code>newObj</code> which will remain allocated until the application will be not closed.</p>

<p>How can we solve this issue?
<code>autorelease</code>, keep the object alive for a period of time. Then, the object is automatically released, avoiding so, a memory leak:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* MGClassB */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">getAnObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newObj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">newObj</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the next paragraph we will go in depth explaining why in this example doesn&rsquo;t appear an <strong>autorelease pool</strong>, but before, let&rsquo;s go to have a look to another situation where you need to create that.<br/>
An <strong>autorelease pool</strong> is a container where autoreleased objects are placed. When the pool is drained, every object in the container is released. This could be very useful in a situation like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSAutoreleasePool</span> <span class="o">*</span><span class="n">myPool</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSAutoreleasePool</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Do something that creates a lot of temporary objects autoreleased. */</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">myPool</span> <span class="n">drain</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>that in the modern <strong>Objective-C</strong> becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">method</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="cm">/* Do something that creates a lot of temporary objects autoreleased. */</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This cyle, is executed 10.000 times. You maybe don&rsquo;t know how many objects will be allocated in your code, but without using <code>@autoreleasepool</code>, the memory would be filled with a lot of objects allocations, that instead at the end of each cycle would be no longer used. This could have an impact on the the performance of the app and could cause risk of memory warnings.<br/>
Using <code>@autoreleasepool</code>, objects would be instead released at the end of the autorelease&rsquo;s scope.</p>

<p>Note that with ARC, you can&rsquo;t call <code>release</code> or <code>autorelease</code>, so having <code>@autoreleasepool</code> sometime is even more useful.
<br />
<br /></p>

<h2>Under the hood</h2>

<p>We know that an object which is autoreleased, goes in an autorelease pool, but keep in mind this example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* MGClassB */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">getAnObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newObj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">newObj</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>the question is: <strong>what autorelease pool does <code>newObj</code> go in?</strong><br/>
The answer is easy, and it is in the file named <code>main.m</code> in the folder <code>Supporting Files</code> of any XCode project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, the <code>main</code> method <strong>has the first autorelease pool</strong> of the entire project.
So in our example, <code>newObj</code> goes in the main autorelease pool, which is drained when the current <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">Run Loop</a> terminates.<br/>
We are obviously supposing to be in the main thread, but however, in general, <strong>every thread has his main autorelease pool</strong>.</p>

<p>So now that we know the theory, the next question is: <strong>where does the autoreleased object found the pointer to the correct autorelease pool?</strong>
As the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html">Apple Documentation</a> says:</p>

<blockquote>
Each thread in a Cocoa application maintains its own stack of autorelease pool blocks.
</blockquote>


<p>and this is.  Simple as that!<br/>
So basically when the object call <code>autorelease</code>, it does something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">autorelease</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AutoreleasePool</span> <span class="o">*</span><span class="n">pool</span> <span class="o">=</span> <span class="cm">/* Take from the stack the most recently autorelease pool */</span>
</span><span class='line'>    <span class="p">[</span><span class="n">pool</span> <span class="nl">add</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, since autorelease&rsquo;s pool can be several and nested, <strong>there MUST be a stack</strong>.<br/>
This is of course an high level code to make it easier to understand, but the open source Apple&rsquo;s implementation of autorelease is <a href="http://opensource.apple.com/source/objc4/objc4-493.9/runtime/objc-arr.mm">here</a>.</p>

<p>The last thing to stress, regards the autorelease pool&rsquo;s container.<br/>
Indeed, <strong>what datastructure does an autorelease pool use to store objects to release?</strong><br/>
Let&rsquo;s try:</p>

<ul>
<li><code>NSMutableArray</code>: no, because it would retain the object calling <code>-addObject</code>. This would make the autorelease vain;</li>
<li><code>NSMutableDictionary</code>: no, for the same reason of the previous;</li>
<li><code>NSMutableSet</code>: no, for the same reason of the previous and because doesn&rsquo;t accept repeated object.</li>
</ul>


<p>So what does it use?<br/>
Easy: any data structure which <strong>doesn&rsquo;t retains the object</strong> and that <strong>accepts repeated objects</strong>, like for example <code>NSPointerArray</code> with <code>weak</code> objects references, <code>LinkedList</code>, etc.
<br />
<br /></p>

<h2>Conclusion</h2>

<p>I hope that this article has cleared every doubt about the <code>autorelease</code> method and the <strong>autorelease pool</strong>. Even if the management of an autorelease pool will be always a system&rsquo;s responsibility, it is very important to understand how it works.</p>

<p>Follow me on <a href="http://twitter.com/matteo_gobbi">Twitter</a>!</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
